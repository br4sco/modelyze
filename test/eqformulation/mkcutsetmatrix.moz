/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include EquationsFormulation

def x_1, x_2, x_3: Vector
def y_1, y_2, y_3: Vector
def r_1, r_2, r_3, r_4: Real

def f(v: MatrixMapVector) -> [[Vector]] = { matrixToList v }
def ff(v: MatrixMapSReal) -> [[<Real>]] = { matrixToList v }

def IM1 = listToMatrix [
                        [ 1.,  0., -1.],
                        [-1.,  1.,  0.],
                        [ 0., -1.,  1.]
                      ] (mmRealZero (3, 3))

def vs1 = [
            listToMatrix [[x_1], [x_2], [x_3]] (mmVecZero (3, 1)),
            listToMatrix [[y_1], [y_2], [y_3]] (mmVecZero (3, 1))
          ]

def A1r = listToMatrix [
                        [ -1.],
                        [ -1.]
                      ] (mmRealZero (2, 1))
def vs1r = [
            [[x_1], [x_2], [x_3]],
            [[y_1], [y_2], [y_3]]
           ]

def IM2 = listToMatrix [[0., 0., 1., 1.], [1., -1., -1., 0.], [-1., 1., 0., -1.]] (mmRealZero (3, 4))
def vs2 = [
            listToMatrix [[r_1], [r_2], [r_3], [r_4]] (mmSRealZero (4, 1))
          ]

def A2r = listToMatrix [
                        [-1., 1.],
                        [ 0., 1.]
                       ] (mmRealZero (2, 2))

def vs2r = [
            [[r_1], [r_3], [r_2], [r_4]]
           ]


def main = {
  def (A1, nvs1) = mkCutsetMatrix IM1 vs1;
  def _ = dprint(A1 == A1r);
  def _ = dprint(seq (map f nvs1) vs1r);

  def (A2, nvs2) = mkCutsetMatrix IM2 vs2;
  def _ = dprint(A2 == A2r);
  def _ = dprint(seq (map ff nvs2) vs2r);
  ()
}
