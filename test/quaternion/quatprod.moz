include Quaternion

def p = quat 3. 1. (-2.) 1.
def q = quat 2. (-1.) 2. 3.
def r: Quaternion

def _ = dprintln (toScalarEquations (toVector3Equations (r ==. qprod p q)))

def p1, p2, p3, p4: Real
def q1, q2, q3, q4: Real

def p = quat p1 p2 p3 p4
def q = quat q1 q2 q3 q4

def m = listToMap [(p1, 1.), (p2, 2.), (p3, 3.), (p4, 4.), (q1, 5.), (q2, 6.), (q3, 7.), (q4, 8.)]
def _ = dprintln (quat2RealQuat (subs (evalQuat (((p * q)))) m))
