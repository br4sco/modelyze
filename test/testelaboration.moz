/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include ElaborationFuric
include TestHelp

def _ = testCase "create identity matrix"
  (fun t: () ->
    def exp = list_to_IMatrix [[1, 0, 0],
                               [0, 1, 0],
                               [0, 0, 1]];
    def act = identityIMatrix 3;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "row reduction 1"
  (fun t: () ->
    def fixt = list_to_IMatrix [[1, 0, -1],
                                [0, 1, 1],
                                [-1, -1, 0]];
    def exp = list_to_IMatrix [[1, 0, -1],
                               [0, 1, 1],
                               [0, 0, 0]];
    def act = rowreduce fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "row reduction 2"
  (fun t: () ->
    def fixt = list_to_IMatrix
        [[1, 0, -1, 1, 0],
         [0, 1, 1, 0, -1],
         [-1, -1, 0, 0, 0],
         [0, 0, 0, -1, 1]];
    def exp = list_to_IMatrix
        [[1, 0, -1, 0, 1],
         [0, 1, 1, 0, -1],
         [0, 0, 0, 1, -1],
         [0, 0, 0, 0, 0]];
    def act = rowreduce fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "row reduction 3"
  (fun t: () ->
    def fixt = list_to_IMatrix
        [[1, 0, -1, 0, 0, 0],
         [-1, 1, 0, 0, 0, 0],
         [0, -1, 1, 0, 0, 0],
         [0, 0, 0, -1, 1, 0],
         [0, 0, 0, 1, 0, -1],
         [0, 0, 0, 0, -1, 1]];
    def exp = list_to_IMatrix
        [[1, 0, -1, 0, 0, 0],
         [0, 1, -1, 0, 0, 0],
         [0, 0, 0, 1, 0, -1],
         [0, 0, 0, 0, 1, -1],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]];
    def act = rowreduce fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "transpose"
  (fun t: () ->
    def fixt = list_to_IMatrix [[1, 0, -1],
                                [0, 1, 1]];
    def exp = list_to_IMatrix [[1, 0],
                               [0, 1],
                               [-1, 1]];
    def act = transpose fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "chsign"
  (fun t: () ->
    def fixt = list_to_IMatrix [[1, 0, -1],
                                [0, 1, 1]];
    def exp = list_to_IMatrix [[-1, 0, 1],
                                [0, -1, -1]];
    def act = chsign fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "concat"
  (fun t: () ->
    def fixtlhs = list_to_IMatrix [[1, 0, -1],
                                   [0, 1, 1]];
    def fixtrhs = list_to_IMatrix [[1, 0],
                                   [0, 1]];
    def exp = list_to_IMatrix [[1, 0, -1, 1, 0],
                               [0, 1, 1, 0, 1]];
    def act = concat fixtlhs fixtrhs;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "swcols"
  (fun t: () ->
    def x, y, z: Real;
    def fixt = list_to_IMatrix [[1, 0, -1],
                                [0, 1, 1]];
    def fixtvm = list_to_map [(0, x), (1, y), (2, z)];
    def exp = list_to_IMatrix [[0, 1, -1],
                               [1, 0, 1]];
    def (act, avm) = swcols fixt fixtvm 0 1;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "trim"
  (fun t: () ->
    def fixt = list_to_IMatrix
        [[1, 0, -1, 0, 1],
         [0, 1, 1, 0, -1],
         [0, 0, 0, 1, -1],
         [0, 0, 0, 0, 0]];
    def exp = list_to_IMatrix
         [[1, 0],
         [0, 1]];
    def act = trim fixt 1 2 2 3;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "getThroughMatrix"
  (fun t: () ->
    def x, y, z, u, v: Real;
    def vm = list_to_map [(0, x), (1, y), (2, z), (3, u), (4, v)];
    def fixt = list_to_IMatrix
        [[1, 0, -1, 0, 1],
         [0, 1, 1, 0, -1],
         [0, 0, 0, 1, -1],
         [0, 0, 0, 0, 0]];
    def exp = list_to_IMatrix
        [[1, 0, 0, -1, 1],
         [0, 1, 0, 1, -1],
         [0, 0, 1, 0, -1]];
    def (act, nvm) = getThroughMatrix fixt vm;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

def _ = testCase "getAcrossMatrix"
  (fun t: () ->
    def fixt = list_to_IMatrix
        [[1, 0, 0, -1, 1],
         [0, 1, 0, 1, -1],
         [0, 0, 1, 0, -1]];
    def exp = list_to_IMatrix
        [[1, -1, 0, 1, 0],
         [-1, 1, 1, 0, 1]];
    def act = getAcrossMatrix fixt;
    simpleAssertMsg (is_equal act exp) (expActMsg (pp exp) (pp act))
  )

// def _ = "matrixVmapToEquations"
//   def name = "matrixVmapToEquations";
//   def _ = println("==> Start test case " ++ name);
//   def x, y, z, u, v: Real;
//   def vm = list_to_map [(0, x), (1, y), (2, z), (3, u), (4, v)];
//   def fixt = list_to_IMatrix
//       [[1, 0, 0, -1, 1],
//        [0, 1, 0, 1, -1],
//        [0, 0, 1, 0,-1]];
//   // def exp = list_to_IMatrix
//   //     [[1, -1, 0, 1, 0],
//   //      [-1, 1, 1, 0, 1]];
//   def eqs = matrixVMapToEquations fixt vm;
//   def _ = dprint(eqs);
//   // def _ = simple_assert(is_equal IM exp);
//   println("==> End test case " ++ name)
// }
