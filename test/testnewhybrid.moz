/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

Author: Oscar Eriksson oerikss@kth.se
*/

include NewHybridModeling

type Pos = (Real, Real)
type Vel = (Real, Real)
type Body = (Pos, Vel)
type SymPos = (<Real>, <Real>)
type SymVel = (<Real>, <Real>)
type SymBody = (SymPos, SymVel)

def g: Real = 9.8

def freeFall(body: SymBody, body0: Body) -> Equations = {
  def ((x, y), (dx, dy)) = body;
  def ((x0, y0), (dx0, dy0)) = body0;
  init x x0;
  init y y0;
  init dx dx0;
  init dy dy0;
  dx' = 0.;
  dy' = -g;
  x' = dx;
  y' = dy
}

def bouncingBall(body: SymBody, body0: Body) -> Equations = {
  def ((x, y), (dx, dy)) = body;
  def ((x0, y0), (dx0, dy0)) = body0;
  def transFun(body0: Body) -> Equations = {
    def ((x0, y0), (dx0, dy0)) = body0;
    (bouncingBall body ((x0, y0), (dx0, -dy0)))
  };
  (switch (freeFall body body0) y (transFun))
}

def main = {
  def x, y, dx, dy: Real;
  def bb = bouncingBall ((x, y), (dx, dy)) ((0., 10.), (0., 0.));
  def _ = elaborateSwitches bb;
  println("===== EOOP ======")
}
