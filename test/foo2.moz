include OSCMMLANG

def x, y, z: <Real>
// def n1, n2: Node
def vmap = listToMap [(x, 1.1), (y, 1.1)]

def loc1 = loc
  (eqns (x = der y))
  (x > 0.)
  []

def loc2 = loc
  (eqns (x^2. = der y))
  (y > 0.)
  []

def loc3 = {
  loc
    (eqns (der y = 3.); loc1)
    (x > 1. && y > 1.)
    [
      (x > 0.5, fun t: () -> ([step x 1.], loc1)),
      (y > 0.5, fun t:() -> ([step y (x + 1.)], loc2))
    ]
}

def main = {
  def (l, _) = dprint(findLocsBeforeImp loc3 vmap (Map.empty));
  dprint(getDAE l)
}
