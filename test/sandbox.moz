include ModelyzeEOO

type SymBody = (<Real>, <Real>)
type RealBody = (Real, Real)
type Model = RealBody -> SymBody -> Equations 
type ZC = <Real>
/* def switch: Equations -> ZC -> Equations */

def freeFall(init: RealBody, body: SymBody) -> Equations = {
  def (x, dx) = body;
  def (x0, dx0) = init;
  init x x0;
  init dx dx0;
  x' = dx;
  dx = -1.
}

def bouncingBall(init: RealBody, body: SymBody, zc: Bool) -> Equations = {
  def (x, dx) = body;
}

def main = {
  def x: <Real>;
  def dx: <Real>;
  def x0 = 10.;
  def dx0 = 0.;
  def eq = (x' = dx);
  /* def sw = (switch eq x); */
  dprint(sw)
}
