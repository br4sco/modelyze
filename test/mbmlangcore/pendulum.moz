include MBMLANG

def world, f_1, f_2, f_3, f_4: Frame

def m = 1.
// def I = (0.23, 0.46, 0.23)
def x = 1.
def y = 2.
def z = 1.
def I = ((z^2. + y^2.) / 12. * m, (x^2. + z^2.) / 12. * m, (x^2. + y^2.) / 12. * m)
def X = (0., -1., 0.)

def th_1_0 = (-PI) / 3.
def th_2_0 = (-PI) / 3.

def q_1_0 = (cos (th_1_0 / 2.), 0., 0., sin (th_1_0 / 2.))
def q_2_0 = (cos (th_2_0 / 2.), 0., 0., sin (th_2_0 / 2.))

def x_m_1, y_m_1, z_m_1: Real
def r_m_1 = vec3 x_m_1 y_m_1 z_m_1
def q_m_1: Quaternion

def r_r1_1: Vector3
def q_r2_1: Quaternion

def r_m_2: Vector3
def q_m_2: Quaternion

def r_r1_2: Vector3
def q_r2_2: Quaternion

def model = {
  body m I r_m_1 q_m_1 world f_2;
  gravity m world f_2;
  sphericalJoint world f_1;
  rigidArm X r_r1_1 q_r2_1 world f_1 f_2;
  // rotationalDamper 2. world f_1;
  sphericalJoint f_2 f_3;
  rigidArm X r_r1_2 q_r2_2 world f_3 f_4;
  body m I r_m_2 q_m_2 world f_4;
  gravity m world f_4;
  q_m_2 ~==. mkQuat q_2_0;
  q_m_1 ~==. mkQuat q_1_0
}

def main = { elaborateToFile ((equationsElement model)
             ++ visualElement r_m_1 q_m_1 (visualAxes 0.5)
             ++ visualElement r_m_2 q_m_2 (visualAxes 0.5)
             )}
