include MBMLANG

def world, f_1, f_2, f_3, f_4: Frame

def m = 1.
def I = (1., 1., 1.)

def tol, err: Real
def r_1, r_2: Vector3
def q_1, q_2: Quaternion
def r = (-1., 0., 0.)

def model = {
  Body m I world f_2;
  Gravity m world f_2;
  SphericalJoint world f_1;
  _RigidArm r r_1 q_1 world f_1 f_2;
  SphericalJoint f_2 f_3;
  _RigidArm r r_2 q_2 world f_3 f_4;
  Body m I world f_4;
  Gravity m world f_4;
  r_1 <~~ mkVec3 r;
  r_2 <~~ mkVec3 r;
  q_1 <~~. idq;
  q_2 <~~. idq;
  err = sqrt((sqrt(norm2 q_1) - 1.)^2.) + sqrt((sqrt(norm2 q_2) - 1.)^2.);
  tol = 1.e-6
}

def main = { elaborateToFile (equationsElement model) }

// def _ = dprintln (elaborate model)
