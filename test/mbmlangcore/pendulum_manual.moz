include MBMLANG

def m = 15.
def x = 1.
def y = 2.
def z = 1.
def I = ((z^2. + y^2.) / 12. * m, (x^2. + z^2.) / 12. * m, (x^2. + y^2.) / 12. * m)
def J = vec3 15.23 0.46 15.23
def J = mkVec3 I

def x_m, y_m, z_m: Real
def r_m = vec3 x_m y_m z_m
def omx_m, omy_m, omz_m: Real
def om_m = vec3 omx_m omy_m omz_m
def w_m, i_m, j_m, k_m: Real
def q_m = quat w_m i_m j_m k_m

def X = vec3 0. 1. 0.
def gamma = vec3 0. 0. (-9.81)

def model = {
  r_m == L (q_m) X;
  q_m' ==. 0.5 * q_m * (q_ om_m);
  J * (om_m') + (cross om_m (J * om_m)) == cross X (L (qconj q_m) (m * gamma));
  // omx_m <- 0.;
  // omy_m <- 1.5;
  // omz_m <- -0.0461538;
  w_m <- cos (-PI / 8.);
  i_m <- 0.;
  j_m <- 0.;
  k_m <- sin (-PI / 8.)
}

def main = { elaborateToFile ((equationsElement model)
             ++ visualElement r_m q_m (visualAxes 0.5)
             )}
