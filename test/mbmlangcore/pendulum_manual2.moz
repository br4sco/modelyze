include MBMLANG

def m = 15.
def x = 1.
def y = 2.
def z = 1.
def I = ((z^2. + y^2.) / 12. * m, (x^2. + z^2.) / 12. * m, (x^2. + y^2.) / 12. * m)
def J = vec3 15.23 0.46 15.23
def J = mkVec3 I

def rx_m1, ry_m1, rz_m1: Real
def r_m1 = vec3 rx_m1 ry_m1 rz_m1
def omx_m1, omy_m1, omz_m1: Real
def om_m1 = vec3 omx_m1 omy_m1 omz_m1
def w_m1, i_m1, j_m1, k_m1: Real
def q_m1 = quat w_m1 i_m1 j_m1 k_m1

def X = vec3 0. 1. 0.
def gamma = vec3 0. 0. (-9.81)

def model = {
  r_m1 == L (q_m1) X;
  q_m1' ==. 0.5 * q_m1 * (q_ om_m1);
  J * (om_m1') + (cross om_m1 (J * om_m1)) == cross X (L (qconj q_m1) (m * gamma));
  // omx_m1 <- 0.;
  // omy_m1 <- 1.5;
  // omz_m1 <- -0.0461538;
  w_m1 <- cos (0. * -PI / 8.);
  i_m1 <- 0.;
  j_m1 <- 0.;
  k_m1 <- sin (0. * -PI / 8.)
}

def main = { elaborateToFile ((equationsElement model)
             ++ visualElement r_m1 q_m1 (visualAxes 0.5)
             )}
