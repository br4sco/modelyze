include MBMLANG

def X = vec3 0. 1. 0.
def m = 15.

// def J = vec3 0.23 0.46 0.23
// def J = vec3 15.23 0.46 15.23
def x = 1.
def y = 1.
def z = 1.
// def I = ((z^2. + y^2.) / 12. * m, (x^2. + z^2.) / 12. * m, (x^2. + y^2.) / 12. * m)
def I = (1., 1., 1.)
def J = mkVec3 I

def rx_m, ry_m, rz_m: Real
def r_m = vec3 rx_m ry_m rz_m
def vx_m, vy_m, vz_m: Real
def v_m = vec3 vx_m vy_m vz_m
def Tx_m, Ty_m, Tz_m: Real
def T_m = vec3 Tx_m Ty_m Tz_m
def Fx_m, Fy_m, Fz_m: Real
def F_m = vec3 Fx_m Fy_m Fz_m
def omx_m, omy_m, omz_m: Real
def om_m = vec3 omx_m omy_m omz_m
def Omx_m, Omy_m, Omz_m: Real
def Om_m = vec3 Omx_m Omy_m Omz_m
def w_m, i_m, j_m, k_m: Real
def q_m = quat w_m i_m j_m k_m

def gamma = vec3 0. 0. (9.81)

// def r_g, F_g, r_h1, F_h1, r_r1, F_r1, om_r2, r_h2, F_h2, r_T, F_T: Vector3

def rx_h1, ry_h1, rz_h1: Real
def r_h1 = vec3 rx_h1 ry_h1 rz_h1

def Fx_h1, Fy_h1, Fz_h1: Real
def F_h1 = vec3 Fx_h1 Fy_h1 Fz_h1

def rx_g, ry_g, rz_g: Real
def r_g = vec3 rx_g ry_g rz_g

def Fx_g, Fy_g, Fz_g: Real
def F_g = vec3 Fx_g Fy_g Fz_g

def rx_r1, ry_r1, rz_r1: Real
def r_r1 = vec3 rx_r1 ry_r1 rz_r1

def Tx_r2, Ty_r2, Tz_r2: Real
def T_r2 = vec3 Tx_r2 Ty_r2 Tz_r2

def omx_r2, omy_r2, omz_r2: Real
def om_r2 = vec3 omx_r2 omy_r2 omz_r2

def w_r2, i_r2, j_r2, k_r2: Real
def q_r2 = quat w_r2 i_r2 j_r2 k_r2

def w_r1, i_r1, j_r1, k_r1: Real
def q_r1 = quat w_r1 i_r1 j_r1 k_r1

def omx_r1, omy_r1, omz_r1: Real
def om_r1 = vec3 omx_r1 omy_r1 omz_r1

def Tx_r1, Ty_r1, Tz_r1: Real
def T_r1 = vec3 Tx_r1 Ty_r1 Tz_r1

def omx_h1, omy_h1, omz_h1: Real
def om_h1 = vec3 omx_h1 omy_h1 omz_h1

def Tx_h1, Ty_h1, Tz_h1: Real
def T_h1 = vec3 Tx_h1 Ty_h1 Tz_h1

def rx_r1, ry_r1, rz_r1: Real
def r_r1 = vec3 rx_r1 ry_r1 rz_r1

def Fx_r1, Fy_r1, Fz_r1: Real
def F_r1 = vec3 Fx_r1 Fy_r1 Fz_r1

def rx_T, ry_T, rz_T: Real
def r_T = vec3 rx_T ry_T rz_T

def Fx_T, Fy_T, Fz_T: Real
def F_T = vec3 Fx_T Fy_T Fz_T

def model = {
  r_m' == v_m;
  q_m' ==. 0.5 * (q_ om_m) * q_m;
  om_m == L (q_m) Om_m;
  q_r2' ==. 0.5 * (q_ om_r2) * q_r2;

  v_m' == (1. / m) * F_m;
  J * Om_m' == -cross Om_m (J * Om_m) + L (qconj q_m) T_m;
  r_h1 == zero3;
  T_h1 == zero3;
  F_g == m * gamma * kk;
  r_r1 == L q_r2 (-X);
  T_r2 == -cross (r_r1) F_r1;
  om_r1 == zero3;
  r_T == X;

  F_h1 == -F_r1;
  F_m == -F_g + F_r1 - F_T;
  r_g == r_m;
  r_r1 == r_h1 - r_m;
  r_T == r_m;

  T_m == -T_r2 + T_r1;
  T_h1 == -T_r1;
  om_r2 == om_m;
  om_r1 == om_h1 - om_m;

  q_r2 ~==. q_m;
  // w_m <- cos (0.);
  // i_m <- 0.;
  // j_m <- 0.;
  // k_m <- sin (0.)
  norm2 q_m ~= 1.
}

def th_m, th_r2: Real
def model2d = {
  rz_m  = 0.;
  w_m = cos(th_m / 2.);
  i_m = 0.;
  j_m = 0.;
  k_m = sin(th_m / 2.);

  rx_m' = vx_m;
  ry_m' = vy_m;
  th_m' = omz_m;
  vx_m' = Fx_m;
  vy_m' = Fy_m;
  omz_m' = Tz_m;

  Fx_g = 0.;
  Fy_g = 9.81;

  rx_h1 = 0.;
  ry_h1 = 0.;

  th_r2' = omz_r2;
  rx_r1 = -cos(th_r2);
  ry_r1 = -sin(th_r2);
  Tz_r2 = cos(th_r2) * Fy_r1 - sin(th_r2) * Fx_r1;

  Fx_h1 = -Fx_r1;
  Fy_h1 = -Fy_r1;
  Fx_m = -Fx_g + Fx_r1;
  Fy_m = -Fy_g + Fy_r1;
  rx_g = rx_m;
  ry_g = ry_m;
  rx_r1 = rx_h1 - rx_m;
  ry_r1 = ry_h1 - ry_m;
  Tz_m = -Tz_r2;
  omz_r2 = omz_m
}

def main = { elaborateToFile ((equationsElement model2d)
             ++ visualElement r_m q_m (visualAxes 0.5)
             )}
