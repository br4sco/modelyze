/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include daelanginterfaces
include Equation

def test_cont_to_set = {
  def _ = println("==> Start test case cont_to_set");
  def x, y, z: Real;
  def eqs = (x = y; x = z; y = z);
  def _ = dprint(cont_to_set eqs);
  println("==> End test case cont_to_set")
}

def test_set_to_cont = {
  def _ = println("==> Start test case set_to_cont");
  def x, y, z: Real;
  def set = (list_to_set [x = y, x = z, y = z]);
  def _ = dprint(set_to_cont set);
  println("==> End test case set_to_cont")
}

def test_E_gvmap_to_ukmap_yy_yp = {
  def name = "E_gvmap_to_ukmap_yy_yp";
  def _ = println("==> Start test case " ++ name);
  def x, y: Real;
  def E = (list_to_set [x = y, der x = 2.]);
  def gvmap = (list_to_map [(der x, (true, 3.)), (y, (false, 2.)), (x, (true, 1.))]);
  def (ukm, yy, yp) = E_gvmap_to_ukmap_yy_yp E gvmap 0.;
  def _ = dprint(E);
  def _ = dprint(gvmap);
  def _ = dprint(ukm);
  def _ = dprint(yy);
  def _ = dprint(yp);
  println("==> End test case " ++ name)
}

def test_ukmap_yy_yp_to_vmap = {
  def name = "ukmap_yy_yp_to_vmap";
  def _ = println("==> Start test case " ++ name);
  def x, y: Real;
  def ukm = list_to_map [(x, (0, true)), (y, (1, false))];
  def yy = (list_to_array [1., 2.]);
  def yp = (list_to_array [3., 4.]);
  def vmap = ukmap_yy_yp_to_vmap ukm yy yp;
  def _ = dprint(ukm);
  def _ = dprint(yy);
  def _ = dprint(yp);
  def _ = dprint(vmap);
  println("==> End test case " ++ name)
}

def test_gvmap_ukmap_to_yyconstrarr = {
  def name = "gvmap_ukmap_to_constrarr";
  def _ = println("==> Start test case " ++ name);
  def x, y, z: Real;
  def gvmap = (list_to_map [(x,(true, 1.)), (der x, (false, 10.)), (y, (false, 2.))]);
  def ukm = (list_to_map [(x, (0, true)), (y, (1, true)), (z, (2, false))]);
  def c = gvmap_ukmap_to_yyconstrarr gvmap ukm;
  def _ = dprint(gvmap);
  def _ = dprint(ukm);
  def _ = dprint(c);
  println("==> End test case " ++ name)
}
