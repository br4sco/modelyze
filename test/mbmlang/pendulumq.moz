include Pendulum_Common
include Quaternion

def w, i, j, k: Real
def om_x, om_y, om_z: Real

def gg = mkVector(0., 9.81, 0.)

def q = mkQuaternion(w, i, j, k)
def om = mkVector(om_x, om_y, om_z)
def om_q = mkQuaternion(0., om)
def dom = om'
def r = mkVector((-1.), 0., (-1.))
def r_q = mkQuaternion(0., r)
def rr = im (quatProd q (quatProd r_q (quatConj q)))

def t_1 = (ss rr) * ((ss dom) * rr)
def t_2 = (ss rr) * ((ss om) * ((ss om) * rr))
def t_3 = (ss rr) * gg

def model = [
  dom + t_1 + t_2 - t_3,
  q' - 0.5 *. (quatProd om_q q)
]

// def _ = iter (fun M: MatrixMapSReal -> def _ = dp M; ()) model

def rs = concat (concat (map (fun M: MatrixMapSReal -> matrixToList M) model))
def _ = writeFile MODEL_FILENAME (exportModelica "Pendulum" rs (listToMap [(w, (1., false))]))
// def _ = println (exportMatlab2 rs)
