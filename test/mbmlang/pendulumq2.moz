include Pendulum_Common
include Quaternion

def gg = mkVector(0., 9.81, 0.)
def r = mkVector((-1.), 0., (-1.))

def x_m, y_m, z_m: Real
def vx_m, vy_m, vz_m: Real
def Fx_m, Fy_m, Fz_m: Real
def r_m = mkVector(x_m, y_m, z_m)
def v_m = mkVector(vx_m, vy_m, vz_m)
def F_m = mkVector(Fx_m, Fy_m, Fz_m)

def w_m, i_m, j_m, k_m: Real
def Tx_m, Ty_m, Tz_m: Real
def omx_m, omy_m, omz_m: Real
def q_m = mkQuaternion(w_m, i_m, j_m, k_m)
def om_m = mkVector(omx_m, omy_m, omz_m)
def T_m = mkVector(Tx_m, Ty_m, Tz_m)

def x_g, y_g, z_g: Real
def Fx_g, Fy_g, Fz_g: Real
def r_g = mkVector(x_g, y_g, z_g)
def F_g = mkVector(Fx_g, Fy_g, Fz_g)

def x_h, y_h, z_h: Real
def Fx_h, Fy_h, Fz_h: Real
def r_h = mkVector(x_h, y_h, z_h)
def F_h = mkVector(Fx_h, Fy_h, Fz_h)

def x_r1, y_r1, z_r1: Real
def Fx_r1, Fy_r1, Fz_r1: Real
def r_r1 = mkVector(x_r1, y_r1, z_r1)
def F_r1 = mkVector(Fx_r1, Fy_r1, Fz_r1)

// def w_r1, i_r1, j_r1, k_r1: Real
// def Tx_r1, Ty_r1, Tz_r1: Real
// def omx_r1, omy_r1, omz_r1: Real
// def q_r1 = mkQuaternion(w_r1, i_r1, j_r1, k_r1)
// def om_r1 = mkVector(omx_r1, omy_r1, omz_r1)
// def T_r1 = mkVector(Tx_r1, Ty_r1, Tz_r1)

def w_r2, i_r2, j_r2, k_r2: Real
def Tx_r2, Ty_r2, Tz_r2: Real
def omx_r2, omy_r2, omz_r2: Real
def q_r2 = mkQuaternion(w_r2, i_r2, j_r2, k_r2)
def om_r2 = mkVector(omx_r2, omy_r2, omz_r2)
def T_r2 = mkVector(Tx_r2, Ty_r2, Tz_r2)

def model = append
[
  r_m' - v_m,
  v_m' - F_m,
  om_m' - T_m,
  q_m' - 0.5 *. (quatProd (mkQuaternion(om_m)) q_m),
  F_g - gg,
  r_h,
  // q_r1' - 0.5 *. (quatProd (mkQuaternion(om_r1)) q_r1),
  // q_r1 - mkQuaternion(1., 0., 0., 0.),
  r_r1 - im (quatProd q_r2 (quatProd (mkQuaternion(r)) (quatConj q_r2))),
  q_r2' - 0.5 *. (quatProd (mkQuaternion(om_r2)) q_r2),
  T_r2 + (ss r_r1) * F_r1
]

[
  r_m - r_h - r_r1,
  r_m - r_g,
  F_r1 - F_g - F_m,
  F_r1 + F_h,
  om_r2 - om_m,
  T_m - T_r2
]

// def _ = iter (fun M: MatrixMapSReal -> def _ = dp M; ()) model

def rs = concat (concat (map (fun M: MatrixMapSReal -> matrixToList M) model))
def _ = writeFile MODEL_FILENAME (exportModelica "Pendulum" rs (listToMap [(w_m, (1., false)), (w_r2, (1., false))]))
// def _ = println (exportMatlab2 rs)
