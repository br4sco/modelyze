include MBMLANG

def x_m, y_m, z_m: Real
def r_m = vec3 x_m y_m z_m
def v_m, F_m: Vector3
def omx_m, omy_m, omz_m: Real
def om_m = vec3 omx_m omy_m omz_m
def Tx_m, Ty_m, Tz_m: Real
def T_m = vec3 Tx_m Ty_m Tz_m
def w_m, i_m, j_m, k_m: Real
def q_m = quat w_m i_m j_m k_m

def r_g, F_g: Vector3

def r_h, F_h: Vector3

def w_r2, i_r2, j_r2, k_r2: Real
def r_r1, F_r1, om_r2, T_r2: Vector3
def q_r2 = quat w_r2 i_r2 j_r2 k_r2

def x_s, y_s, z_s: Real
def r_s = vec3 x_s y_s z_s
def F_s: Vector3
def omx_s, omy_s, omz_s: Real
def om_s = vec3 omx_s omy_s omz_s
def w_s, i_s, j_s, k_s: Real
def q_s = quat w_s i_s j_s k_s

def qn1: Real
def qn2: Real
def tol, e1, e2: Real

def model = {
  r_m' == v_m;
  v_m' == F_m;
  om_m' == T_m;
  q_m' ==. 0.5 * (q_ om_m) * q_m + (1. - sqrt(norm2 q_m)) * q_m;
  // om_m == 2. * qim (q_m' * (qconj q_m));
  // norm2 q_m = 1.;

  F_g == 9.81 * jj;
  r_h == zero3;
  r_r1 == L (q_r2) (vec3 (-1.) 0. (0.));
  T_r2 == cross (-r_r1) F_r1;
  q_r2' ==. 0.5 * (q_ om_r2) * q_r2 + (1. - sqrt(norm2 q_r2)) * 0.1 * q_r2;
  // om_r2 == 2. * qim (q_r2' * (qconj q_r2));
  // norm2 q_r2 = 1.;
  // qn1 = sqrt (norm2 q_r2) - 1.;
  // qn2 = sqrt (norm2 q_m) - 1.;
  // tol = 1.e-8;

  r_m == r_h - r_r1;
  r_m == r_g;
  F_r1 == F_g + F_m;
  om_r2 == om_m;
  // q_r2 ==. q_m;
  T_m == -T_r2;

  // norm2 q_m ~= 1.;
  // norm2 q_r2 ~= 1.;
  w_m <~ 1.;
  // w_r2 <~ 1.;
  w_r2 <- cos (PI / 8.);
  k_r2 <- sin (PI / 8.)
}

def main = { elaborateToFile (equationsElement model) }
// def main = { println (export2Matlab model) }
