/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include EquationsFormulation

def U: Vector
def ii_V, uu_V, ii_R, uu_R, ii_L, uu_L: Vector
def V, R, L: Real
def n1, n2, n3: Node

def RL = [
            (
             (n1, n2),
             [(uu_V, V * U)],
             [(uu_V, [])],
             [(ii_V ,[U])]
            ),

            (
             (n2, n3),
             [(ii_R, R * ii_R), (uu_R, (1. / R) * ii_R)],
             [(uu_R, [])],
             [(ii_R, [])]
            ),

            (
             (n3, n1),
             [(uu_L, L * der ii_L)],
             [(uu_L, [])],
             [(ii_L, [U])]
            )
         ]

def i_1, j_1, k_1, i_2, j_2, k_2: Vector
def r_m, v_m, F_m, t_m, o_m, T_m: Vector
def r_g, v_g, F_g, t_g, o_g, T_g: Vector
def m, g, I: Real
def n_m1, n_m2: Node

def BD = [[
            (
             (n_m1, n_m2),
             [(F_m, m * der v_m)],
             [(r_m, [i_1, j_1]), (v_m, [i_1, j_1])],
             [(F_m ,[])]
            ),
            (
             (n_m2, n_m1),
             [(F_g, (m * g) * j_2)],
             [(r_g, [i_2, j_2]), (v_g, [i_2, j_2])],
             [(F_g ,[])]
            )
          ],
          [
            (
             (n_m1, n_m2),
             [(T_m, I * der o_m)],
             [(t_m, [k_1]), (o_m, [k_1])],
             [(T_m ,[])]
            ),
            (
             (n_m2, n_m1),
             [(T_g, zeroVector)],
             [(t_g, [k_1]), (o_g, [k_1])],
             [(T_g ,[])]
            )
         ]]

def main = {
  def _ = formulateEqs [RL];
  def _ = formulateEqs BD;
  ()
}
