/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.


*/

include Equation

def exportModelica(name: String, e: Equations, ivm: (<Real> => (Real, Bool))) -> String = {

  def r2mr(r: Real) -> String = {
      if r < 0. then "(" ++ real2string r  ++ ")"
      else real2string r
  };

  def pprintUnknowns(e: Equations) -> String = {
    def f(a: String, u: <Real>) -> String = {
      def iv = (if Map.mem u ivm then {
                  def (u_0, fix) = (Map.find u ivm);
                  " (start=" ++ r2mr u_0 ++ (if fix then ", fixed=true)" else ")")
                } else "");
      a ++ "  Real " ++ symstr(u) ++ iv ++ ";\n"
    };
    def us = (map (fun uk: (<Real>, (Int, Bool)) -> fst uk) (Map.toList (makeUkMap e)));
    foldLeft f "" us
  };


  def pprintExpr(e: <>) -> String = {
      match e with
      | e1 + e2 -> "(" ++ pprintExpr e1 ++ " + " ++ pprintExpr e2 ++ ")"
      | e1 - e2 -> "(" ++ pprintExpr e1 ++ " - " ++ pprintExpr e2 ++ ")"
      | e1 * e2 -> pprintExpr e1 ++ " * " ++ pprintExpr e2
      | e1 / e2 -> pprintExpr e1 ++ " / " ++ pprintExpr e2
      | -e -> "(-" ++ pprintExpr e ++ ")"
      | e1^e2 -> pprintExpr e1 ++ " ^ " ++ "(" ++ pprintExpr e2 ++ ")"
      | der e -> "der(" ++ pprintExpr e ++ ")"
      | ~sin e -> "sin(" ++ pprintExpr e ++ ")"
      | ~cos e -> "cos(" ++ pprintExpr e ++ ")"
      | ~tan e -> "tan(" ++ pprintExpr e ++ ")"
      | ~asin e -> "asin(" ++ pprintExpr e ++ ")"
      | ~acos e -> "acos(" ++ pprintExpr e ++ ")"
      | ~atan e -> "atan(" ++ pprintExpr e ++ ")"
      | ~sinh e -> "sinh(" ++ pprintExpr e ++ ")"
      | ~cosh e -> "cosh(" ++ pprintExpr e ++ ")"
      | ~tanh e -> "tanh(" ++ pprintExpr e ++ ")"
      | ~sqrt e -> "sqrt(" ++ pprintExpr e ++ ")"
      | ~exp e -> "exp(" ++ pprintExpr e ++ ")"
      | ~log e -> "log(" ++ pprintExpr e ++ ")"
      | ~log10 e -> "log10(" ++ pprintExpr e ++ ")"
      | sym: Real -> symstr(e)
      | sval r: Real -> r2mr r
      | _ -> error "Unmatched"
  };

  def pprintEqs(e: Equations) -> String  = {
    match e with
    | e_1; e_2 -> pprintEqs e_1 ++ pprintEqs e_2
    | e_1 = e_2 -> " " ++ pprintExpr e_1 ++ " = " ++ pprintExpr e_2 ++ ";\n"
    | _ -> error "Unmatched"
  };

  "model " ++ name ++ "\n"
  ++ pprintUnknowns e
  ++ "equation\n"
  ++ pprintEqs e
  ++ "end " ++ name ++ ";\n"
}
