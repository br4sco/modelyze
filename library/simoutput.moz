/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Equation

def probe : <String -> Real> 
type ProbeMap =  (String => [Signal])
type ProbeList =  [(String, [Signal])]

// Data for simulation results for one point in time. The first element
// of the time is the time value and the second a list of data points
// representing the different variables (defined using probes).
type StepVal = (Real,[Real])

// Type definition for simulation result. Contains a list names
// of the variables used as well as the data points.
type SimulationResult = ([String],[StepVal])


def pprintSimulation(res:SimulationResult) -> String = {
  def (names,stepvals) = res;
  def pnames(varnames:[String]) -> String = {
    match varnames with
    | n::ns -> n ++ "\t" ++ pnames(ns)
    | [] -> "\n"
  };
  def psteps(step:[StepVal], first:Bool) -> String = {
    match step with
    | (t,x::xs)::xxs if first ->        
        real2string(t) ++ "\t" ++ psteps((t,x::xs)::xxs,false)
    | (t,x::xs)::xxs -> 
        (if x == INFINITE then "?" else real2string x) ++
        "\t" ++ psteps((t,xs)::xxs,false)
    | (t,[])::xxs -> "\n" ++ psteps(xxs,true)
    | [] -> ""
  };
  "time\t" ++ pnames(names) ++ psteps(stepvals,true) 
}

def makeStepVal(currtime:Real,yy:{Real},probes:[(String,[Signal])], ukmap:UkMap) -> StepVal = {
  def mkvals(probes:[(String,[Signal])]) -> [Real] = {
    match probes with
    | (s,u::us)::ss -> {
         def v = (if Map.mem u ukmap then 
                    (Array.get yy (fst(Map.find u ukmap))) 
                  else INFINITE);
         v::(mkvals((s,us)::ss))
         }
    | (s,[])::ss -> mkvals(ss) 
    | [] -> []
  }; 
  (currtime,reverse(mkvals probes));
}


def getProbeVals(probes:ProbeList, get:(<Real> -> Real)) -> [Real] = {
  def mkvals(probes:[(String,[Signal])]) -> [Real] = {
    match probes with
    | (s,u::us)::ss -> (get(u))::(mkvals((s,us)::ss))
    | (s,[])::ss -> mkvals(ss) 
    | [] -> []
  }; 
  mkvals probes;
}

  
def makeProbeNames(name:String, probes:ProbeList) -> [String] = {
    match probes with
    | (s,u::us)::ss -> (if name <==> "" then s else name ++ "." ++ s)::
                       (makeProbeNames(name,(s,us)::ss))
    | (s,[])::ss -> makeProbeNames(name,ss)
    | [] -> []
}

def addProbe(s:String, u:Signal, ps:ProbeMap) = {
    if Map.mem s ps then Map.add s (u::(Map.find s ps)) ps
    else Map.add s [u] ps
}

def elabProbesAcc(e:<?>, ps:ProbeMap) -> (<?>,ProbeMap) = {
    match e with
    | probe (sval s:String) -> {
        def u:Signal; 
        (u,addProbe s u ps);
      }
    | e1 e2 -> {
       def (e1b,ps1) = elabProbesAcc(e1,ps);
       def (e2b,ps2) = elabProbesAcc(e2,ps1);
       (e1b e2b,ps2);
      }
    | _ -> (e,ps)
}

def elaborateProbes(model:<?>) -> (<?>,ProbeMap) = {
  elabProbesAcc(model,Map.empty);
}
 
