/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include GRAPHSIMEXPORT
include GRAPHSIM

def SCENE_FILENAME = "/tmp/scene.json"

type Color = String
type Opacity = Real

type Material
def stdMaterial: Color -> Real -> Material

type Geometry3D
def cuboid: Real -> Real -> Real -> Geometry3D
def sphere: Real -> Geometry3D
def cylinder: Real -> Real -> RealVector3 -> Geometry3D

type VisualData
def invisible: VisualData
def visualSolid: Geometry3D -> Material -> VisualData
def visualAxes: Real -> VisualData

def visualObject: Position -> Position -> VisualData -> Model

def WHITE = "#ffffff"
def RED = "#ff0000"
def BLUE = "#0000ff"
def GREEN = "#00ff00"
def BLACK = "#000000"

def real2JSONString(r: Real) -> String = {
  if int2real (real2int r) == r then real2string r ++ "0"
  else real2string r
}

def geometry2JSON(g: Geometry3D) -> String = {
  match g with
  | cuboid (sval w: Real) (sval h: Real) (sval d: Real) ->
      "{ " ++
      "\"type\": \"Cuboid\", " ++
      "\"w\": " ++ real2JSONString w ++ ", " ++
      "\"h\": " ++ real2JSONString h ++ ", " ++
      "\"d\": " ++ real2JSONString d ++
      " }"

  | sphere (sval r: Real) ->
    "{ " ++
    "\"type\": \"Sphere\", " ++
    "\"radius\": " ++ real2JSONString r ++
    " }"

  | cylinder (sval r: Real) (sval h: Real) (sval u: RealVector3) -> {
      def (u1, u2, u3) = u;
      "{ " ++
      "\"type\": \"Cylinder\", " ++
      "\"radius\": " ++ real2JSONString r ++ ", " ++
      "\"height\": " ++ real2JSONString h ++ ", " ++
      "\"u1\": " ++ real2JSONString u1 ++ ", " ++
      "\"u2\": " ++ real2JSONString u2 ++ ", " ++
      "\"u3\": " ++ real2JSONString u3 ++
      " }"
    }

  | _ -> error "Unmatched Geometry3D"
}

def material2JSON(m: Material) -> String = {
  match m with
  | stdMaterial (sval s: String) (sval o: Real) -> {
      if o >= 0. && o <= 1. then {
        "{ " ++
        "\"type\": \"Standard\", " ++
        "\"color\": \"" ++ s ++ "\", " ++
        "\"opacity\": " ++ real2JSONString o ++
        " }"
      } else error INVALID_ARGUMENT
    }
  | _ -> error "Unmatched Material"
}

def visualData2Json(d: VisualData) -> String = {
  match d with
  | visualSolid g m -> "{ \"type\": \"Solid\"," ++
                       "\"geometry\": " ++ geometry2JSON g ++ ", " ++
                       "\"material\": " ++ material2JSON m ++
                       " }"
  | visualAxes (sval s: Real) -> "{ \"type\": \"Axes\", " ++
                                 "\"size\": " ++ real2JSONString s ++
                                 " }"
  | _ -> error "Unmatched visual data"
}

def visualObject2JSON(m: Model) -> String = {
  def work(m: Model) -> String = {
    match m with
    | m_1 ; m_2 -> work m_1 ++ ", " ++ work m_2
    | visualObject (sval x: Position)  (sval q: Orientation) vd -> {
        def (x, y, z) = toRealVector3 x;
        def (w, i, j, k) = toRealQauternion q;
        "{ " ++
        "\"xLabel\": \"" ++ symstr(x) ++ "\", " ++
        "\"yLabel\": \"" ++ symstr(y) ++ "\", " ++
        "\"zLabel\": \"" ++ symstr(z) ++ "\", " ++
        "\"wLabel\": \"" ++ symstr(w) ++ "\", " ++
        "\"iLabel\": \"" ++ symstr(i) ++ "\", " ++
        "\"jLabel\": \"" ++ symstr(j) ++ "\", " ++
        "\"kLabel\": \"" ++ symstr(k) ++ "\", " ++
        "\"data\": " ++ visualData2Json vd ++
        " }"
      }
    | _ -> { def _ = dprintln m; error "Expected only visualObject" }
  };
  "{ \"scene\": [ " ++ work m ++ " ] }"
}

def getVisibleVisualObjects(m: Model) -> Model = {
  def work(m: Model, a: Model) -> Model = {
    match m with
    | m_1 ; m_2 -> work m_2 (work m_1 a)
    | visualObject _ _ invisible -> a
    | visualObject _ _ _ -> a ; m
    | _ -> a
  };
  work m NoElement
}

def cleanupModel(m: Model) -> Model = {
    match m with
    | m_1 ; m_2 -> {
          match (cleanupModel m_1, cleanupModel m_2) with
          | (NoElement, NoElement) -> NoElement
          | (NoElement, m) -> m
          | (m, NoElement) -> m
          | (m_1b, m_2b) -> m_1b ; m_2b
       }
    | _ -> m
}

def elaborateToFile(exportfun: (Model -> ()), m: Model) -> () = {
  def m = elaborate m;
  def vo = getVisibleVisualObjects m;
  def vo = cleanupModel vo;

  def _ = exportfun m;
  match vo with
  | NoElement -> ()
  | _ -> writeFile SCENE_FILENAME (visualObject2JSON vo ++ "\n")
}

def elaborateToFile(m: Model) -> () =
  elaborateToFile export2ModelicaFile m

def elaborateToFileDebug(m: Model) -> () =
  elaborateToFile export2ModelicaFileDebug m

def _mkBodyVarT(t: ()) = {
  def xm1, xm2, xm3: Real;
  vec3 xm1 xm2 xm3
}

def _mkBodyVarR(t: ()) = {
  def qm1, qm2, qm3, qm4: Real;
  quat qm1 qm2 qm3 qm4
}

def _mkBodyVars(t: ()) = {
  def x = _mkBodyVarT ();
  def q = _mkBodyVarR ();
  (x, q)
}

def BodyV(world: Frame, m: Real, Jd: RealVector3, vd: VisualData,
  x: Position, q: Orientation) -> FrameFun1 = {

  fun fm: Frame ->
    visualObject x q vd;
    world -- Body m Jd x q -- fm
}

def BodyV(world: Frame, m: Real, Jd: RealVector3, vd: VisualData,
  q0: RealQuaternion) -> FrameFun1 = {

  fun fm: Frame ->
    def (x, q) = _mkBodyVars ();
    BodyV world m Jd vd x q fm;
    norm2 q ~= 1.;
    q <~~ quat q0
}

def BodyV(world: Frame, m: Real, Jd: RealVector3, vd: VisualData)
  -> FrameFun1 = {

  fun fm: Frame ->
    def (x, q) = _mkBodyVars ();
    BodyV world m Jd vd x q fm;
    norm2 q ~= 1.
}

def _mkTransSensVar(t: ()) = {
  def xs1, xs2, xs3: Real;
  def x = vec3 xs1 xs2 xs3;
  x
}

def SphericalJointV(world: Frame, vd: VisualData) -> FrameFun2 = {
  fun f1: Frame -> fun f2: Frame ->
    def x = _mkTransSensVar ();
    def q = quat ();
    visualObject x q vd;
    f1 -- SphericalJoint -- f2;
    world -- TranslationSensor x -- f1;
    q == IDQ;
    q <~~ IDQ
}

def SphericalJointV(world: Frame, r: Real, c: Color, o: Opacity) -> FrameFun2 = {
  SphericalJointV world (visualSolid (sphere r) (stdMaterial c o))
}

def RevoluteJointV(world: Frame, u: RealVector3, vd: VisualData,
  q0: RealQuaternion) -> FrameFun2 = {

  fun f1: Frame -> fun f2: Frame ->
    def qrj1, qrj2, qrj3, qrj4: Real;
    def q = quat qrj1 qrj2 qrj3 qrj4;
    def x = _mkTransSensVar ();
    visualObject x q vd;
    f1 -- (RevoluteJoint u q world || SphericalJoint) -- f2;
    world -- TranslationSensor x -- f1;
    q <~~ quat q0
}

def RevoluteJointV(world: Frame, r: Real, h: Real, c: Color, o: Opacity,
  u: RealVector3, q0: RealQuaternion) -> FrameFun2 = {

  RevoluteJointV world u (visualSolid (cylinder r h u) (stdMaterial c o)) q0
}

def BarV(world: Frame, m: Real, w: Real, h: Real, d: Real, c: Color, o: Opacity,
  xm: Position, qm: Orientation, ql: Orientation, qr: Orientation) -> FrameFun2 = {

  fun fw: Frame -> fun fe: Frame ->
    def fm: Frame;
    def Jd = mkCuboidInertia m w h d;
    def larm = RigidArm world (-w / 2., 0., 0.) qr;
    def rarm = RigidArm world (-w / 2., 0., 0.) ql;
    fw -- larm  -.- fm -.- rarm -- fe;
    BodyV world m Jd (visualSolid (cuboid w h d) (stdMaterial c o)) xm qm fm;
    Gravity world m fm

}

def BarV(world: Frame, m: Real, w: Real, h: Real, d: Real, c: Color, o: Opacity,
  x: Position, q: Orientation) -> FrameFun2 = {

  fun fw: Frame -> fun fe: Frame ->
    def qr = _mkRigidArmVar ();
    def ql = _mkRigidArmVar ();
    fw -- BarV world m w h d c o x q ql qr -- fe;
    qr ~== q;
    ql ~== q
}

def BarV(world: Frame, m: Real, w: Real, h: Real, d: Real, c: Color, o: Opacity,
  q0: RealQuaternion) -> FrameFun2 = {

  fun fw: Frame -> fun fe: Frame ->
    def qr = _mkRigidArmVar ();
    def ql = _mkRigidArmVar ();
    def (x, q) = _mkBodyVars ();
    fw -- BarV world m w h d c o x q -- fe;
    norm2 q ~= 1.;
    q <~~ quat q0
}

def BarV(world: Frame, m: Real, w: Real, h: Real, d: Real, c: Color, o: Opacity)
  -> FrameFun2 = {

  fun fw: Frame -> fun fe: Frame ->
    def (x, q) = _mkBodyVars ();
    fw -- BarV world m w h d c o x q -- fe;
    norm2 q ~= 1.
}

def SphereV(world: Frame, m: Real, r: Real, c: Color, o: Opacity,
  x: Position, q: Orientation) -> FrameFun1 = {

  fun fm: Frame ->
    def Jd = mkSphericalInertia m r;
    BodyV world m Jd (visualSolid (sphere r) (stdMaterial c o)) x q fm;
    Gravity world m fm
}
