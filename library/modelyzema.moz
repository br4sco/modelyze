/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include SimOutput

type State = ?
type InitState = State
type Time = Real
type VarTy = <?>
type ValTy = ?
type Model = <?>

type InitTy = Model -> State 
type DoStepTy = State -> Real -> (State, Time)
type GetTy = State -> VarTy -> ValTy
type SetTy = State -> VarTy -> ValTy -> State
type GetAsStrTy = State -> VarTy -> String
type InputVars = [VarTy]
type OutputVars = [VarTy]
type Name = String
type Components
def (;) : Components -> Components -> Components

def Comp : Name -> Model -> InputVars -> OutputVars -> InitTy -> DoStepTy -> 
           GetTy -> SetTy -> Components


type Component = (Name,State,ProbeList,InputVars,OutputVars,InitTy,DoStepTy,GetTy,SetTy)


def initComponents(model:Model, acc:[Component]) -> [Component] = {
    match model with
    | e1 ; e2 -> initComponents(e2,initComponents(e1,acc))
    | Comp (sval name:String) model (sval inp:InputVars) (sval outp:OutputVars) 
                  (sval initf:InitTy) (sval dostepf:DoStepTy) 
                  (sval getf:GetTy) (sval setf:SetTy) -> {
         def (state,probes) = initf(model);
         (name,state,Map.toList probes,inp,outp,initf,dostepf,getf,setf)::acc;
      }
    | _ ->  acc 
}


def localGetProbeVals(comps:[Component]) -> [Real] = {
    match comps with 
    | (name,state,probelist,inp,outp,initp,dostep,get,set)::cs -> {        
         def pvals = getProbeVals(probelist,get(state));
         append(pvals,localGetProbeVals(cs));
      }
    | [] -> []
}

                   
def allProbeNames(comps:[Component]) -> [String] = { 
    match comps with
    | (name,state,probelist,inp,outp,initp,dostep,get,set)::cs -> 
        append(makeProbeNames(name,probelist), allProbeNames(cs))
    | [] -> []
}


def maSim(model:Model, steptime:Real, endtime:Real) -> SimulationResult = {

    def comps = initComponents(model, []);

    def stepval = (0.,reverse(localGetProbeVals(comps)));
    
    (reverse(allProbeNames(comps)),reverse([stepval]))
}



def printsim(model:Components, steptime:Real, endtime:Real) = {
    print(pprintSimulation(maSim(model,steptime,endtime)));
}





