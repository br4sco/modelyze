/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Physical
include HDAELANG

def CurrentSensor(i: Current, p: Electrical, n: Electrical) = {
  def u: Voltage;
  Branch i u p n;
  u = 0.
}

def VoltageSensor(u: Voltage, p: Electrical, n: Electrical) = {
  def i: Voltage;
  Branch i u n p;
  i = 0.
}

def Resistor(R: Real, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  Branch i u p n;
  u = R * i
}

def ConstantVoltageSource(V: Real, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  Branch i u p n;
  init u V;
  reinit u u;
  u = V
}

def Capacitor(C: Real, u0: Real, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  Branch i u p n;
  init u u0;
  reinit u u;
  C * (der u) = i
}

def Inductor(L: Real, i0: Real, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  Branch i u p n;
  init i i0;
  reinit i i;
  L * (der i) = u
}

def Diode(forward: Bool, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  def d(forward: Bool) -> Equations = {
    if forward then
      switch (u = 0.) (fun t: () -> d(false)) i
    else
      switch (i = 0.) (fun t: () -> d(true)) u
  };
  Branch i u p n;
  d(forward)
}

def TimedSwitch(open: Bool, t: <Real>, p: Electrical, n: Electrical) = {
  def i: Current;
  def u: Voltage;
  if open then switch (u = 0.) (fun t: () -> i = 0.) t
  else switch (i = 0.) (fun t: () -> u = 0.) t
}

def Clock(t: <Real>) = {
  init t 0.;
  reinit t t;
  der t = 1.
}
