/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include DILLEXPORT
include Dill2D

def MODEL_FILENAME = "/tmp/model.mo"
def SCENE_FILENAME = "/tmp/scene.json"

type Color = String

type Material
def stdMaterial: Color -> Real -> Material

type Geometry2D
def rectangle: Real -> Real -> Geometry2D
def circle: Real -> Geometry2D

type VisualData
def visSolid: Geometry2D -> Material -> VisualData
def visAxes: Real -> VisualData

type ModelElement
def visElement: Vector2 -> <Real> -> VisualData -> ModelElement
def eqsElement: Equations -> ModelElement

def WHITE = "#ffffff"
def RED = "#ff0000"
def BLUE = "#0000ff"
def GREEN = "#00ff00"
def BLACK = "#000000"

def real2JSONstring(r: Real) -> String = {
  if int2real (real2int r) == r then real2string r ++ "0"
  else real2string r
}

def geometry2JSON(g: Geometry2D) -> String = {
  match g with
  | rectangle (sval h: Real) (sval w: Real) -> "{ " ++
                                    "\"type\": \"Rectangle\", " ++
                                    "\"height\": " ++ real2JSONstring h ++ ", " ++
                                    "\"width\": " ++ real2JSONstring w ++
                                    " }"

  | circle (sval r: Real) -> "{ " ++
                             "\"type\": \"Circle\", " ++
                             "\"radius\": " ++ real2JSONstring r ++
                             " }"
  | _ -> error "Unmatched Geometry2D"
}

def material2JSON(m: Material) -> String = {
  match m with
  | stdMaterial (sval s: String) (sval o: Real) -> {
      if o >= 0. && o <= 1. then {
        "{ " ++
        "\"type\": \"Standard\", " ++
        "\"color\": \"" ++ s ++ "\", " ++
        "\"opacity\": " ++ real2JSONstring o ++
        " }"
      } else error INVALID_ARGUMENT
    }
  | _ -> error "Unmatched Material"
}

def visualData2JSON(d: VisualData) -> String = {
  match d with
  | visSolid g m -> "{ \"type\": \"Solid\"," ++
                       "\"geometry\": " ++ geometry2JSON g ++ ", " ++
                       "\"material\": " ++ material2JSON m ++
                       " }"
  | visAxes (sval s: Real) -> "{ \"type\": \"Axes\", " ++
                                 "\"size\": " ++ real2JSONstring s ++
                                 " }"
  | _ -> error "Unmatched visual data"
}

def modelScene2Json(es: [ModelElement]) -> String = {

  def e2string(x: <Real>, y: <Real>, th: <Real>, vd: VisualData) -> String = {
                                      "{ " ++
                                      "\"type\": \"Object\", " ++
                                      "\"x\": \"" ++ symstr(x) ++ "\", " ++
                                      "\"y\": \"" ++ symstr(y) ++ "\", " ++
                                      "\"th\": \"" ++ symstr(th) ++ "\", " ++
                                      "\"data\": " ++ visualData2JSON vd ++
                                      " }"
  };

  def work(es: [ModelElement]) -> String = {
    match es with
    | (visElement (vec x y) th vd)::(o::es_1) -> e2string x y th vd ++ ", " ++ work (tl es)
    | (visElement (vec x y) th vd)::[] -> e2string x y th vd
    | _ -> ""
  };

  "{ \"scene\": [ " ++ work es ++ " ] }"
}

def filterVisElements(es: [ModelElement]) -> [ModelElement] = {
  filter (fun e: ModelElement -> match e with
                                 | visElement _ _ _ -> true
                                 | _ -> false) es
}


def getModel(es: [ModelElement]) -> Equations = {
  def work(a: Equations, o: ModelElement) -> Equations = {
    match o with
    | eqsElement e -> a; e
    | _ -> a
  };
  foldLeft work NoEqn es
}

def elaborateToFile(es: [ModelElement]) -> () = {
  def m = getModel es;
  def ves = filterVisElements es;
  def _ = writeFile MODEL_FILENAME (exportDill2Modelica "Model" m ++ "\n");
  writeFile SCENE_FILENAME (modelScene2Json ves ++ "\n")
}

type ModelElementFun = Frame -> Frame -> Frame -> Set(ModelElement)

def vis(mef: ModelElementFun, vd: VisualData) -> ModelElementFun = {
  fun DATUM: Frame ->
  fun f_p: Frame ->
  fun f: Frame -> {
    def x_v, y_v, th_v: Real;
    def rr_v = vec x_v y_v;
    union
    (listToSet [eqsElement (AcrossController rr_v DATUM f; AcrossController th_v DATUM f),
                visElement rr_v th_v vd])
    (mef DATUM f_p f)
  }
}

def bodyFun(m: Real, I: Real) -> ModelElementFun = {
  fun DATUM: Frame ->
  fun f_p: Frame ->
  fun f: Frame -> {
    def x_m, y_m, vx_m, vy_m, Fx_m, Fy_m, th_m, om_m, T_m: Real;
    def b = Body m I (vec x_m y_m) (vec vx_m vy_m) (vec Fx_m Fy_m)
                 th_m om_m T_m DATUM f;

    Set.add (eqsElement b) (Set.empty)
  }
}

def rigidArmFun(l: Real, th: Real) -> ModelElementFun = {
  fun DATUM: Frame ->
  fun f_p: Frame ->
  fun f: Frame -> {
    def x_r1, y_r1, Fx_r1, Fy_r1, T_r1, th_r2, T_r2: Real;
    def a = RigidArm l th (vec x_r1 y_r1) (vec Fx_r1 Fy_r1)
                     T_r1 th_r2 T_r2 DATUM f_p f;

    Set.add (eqsElement a) (Set.empty)
  }
}
