/*
   Modeling Kernel Language (Modelyze) library
   Copyright (C) 2010-2012 David Broman

   Modelyze library is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Modelyze library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

   written by Oscar Eriksson oerikss@kth.se
 */

include OSCLANGPhysical

def AngularVelocitySensor(o: AngularVelocity, p: Rotational, n: Rotational) = {
  FlowSensor o p n
}

def TorqueSensor(t: Torque, p: Rotational, n: Rotational) = {
 EffortSensor t p n
}

// def Free(p: Rotational, n: Rotational) = {
//   def o_F: AngularVelocity;
//   def t_F: Torque;
//   Branch o_F t_F p n;
//   t_F = 0.
// }

def Damper(D: Real, p: Rotational, n: Rotational) = {
  def o_D: AngularVelocity;
  def t_D: Torque;
  Branch o_D t_D p n;
  D*o_D = t_D
}

def BodyM(o_B: AngularVelocity, I: Real, o_B0: Real, p: Rotational, n: Rotational) = {
  def t_B: Torque;
  init o_B o_B0;
  Branch o_B t_B p n;
  I*(der o_B) = t_B
}

def Body(I: Real, o_B0: Real, p: Rotational, n: Rotational) = {
  def o_B: AngularVelocity;
  BodyM o_B I o_B0 p n
}

def Clutch(open: Bool, tc: Real,
  o_1: AngularVelocity, I_1: Real, o_2: AngularVelocity, I_2: Real,
  p: Rotational, n: Rotational) = {

  def o_C: AngularVelocity;
  def t_C: Torque;
  def tt: Real;
  def c(open: Bool) -> Equations = {
    if open then
      switch
        (nilp ())
        (fun t:() -> Branch o_C t_C p n)
        ([tc - tt])
    else
        switch
        (Branch o_C t_C p n)
        (fun t:() -> nilp ())
        ([tc - tt])
  };

  init tt 0.;
  reinit tt tt;
  der tt = 1.;
  o_C = 0.;
  reinit o_1 ((I_1*o_1 + I_2*o_2)/(I_1 + I_2));
  reinit o_2 ((I_1*o_1 + I_2*o_2)/(I_1 + I_2));
  c(open)
}
