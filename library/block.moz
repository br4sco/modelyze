/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Equation
include Constants

def Feedback(u1:Signal, u2:Signal, y:Signal) = {
    y = u1 - u2;
}

def Gain(k:Real, u:Signal, y:Signal) = {
    y = k * u;
}

def ConstantSource(k:Real, y:Signal) = {
    y = k;
}

def Integrator(k:Real, y0:Real, u:Signal, y:Signal) = {
    init y y0;
    y' = k * u;
}

def Derivative(k:Real, T:Real, u:Signal, y:Signal) = {
    def state:Signal;
    state' = (if (abs k) >= eps then (u - state)/T else 0.);
    y = (if (abs k) >= eps then (k/T)*(u - state) else 0.);
}

def Add(u1:Signal, u2:Signal, y:Signal) = {
    y = u1 + u2;
}

def Add3(u1:Signal, u2:Signal, u3:Signal, y:Signal) = {
    y = u1 + u2 + u3;
}

def PID(k:Real, Ti:Real, Td:Real, Nd:Real, u:Signal, y:Signal) = {
    def s1,s2,s3,s4:Signal;
    Gain(1.0,u,s1);
    Integrator(1.0/Ti, 0.0, u, s2);
    Derivative(Td,max(Td/Nd,100.0*eps), u, s3);
    Add3(s1,s2,s3,s4);
    Gain(k,s4,y);
}
