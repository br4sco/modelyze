/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Matrix
include Graph
include ModelyzeDAE

type Frame = Node

def sw(a: {Dyn}, i: Int, j: Int) -> () = {
  def n = (Array.length a);
  if i < n && 0 <= i && j < n && 0 <= j then {
    def t = (Array.get a i);
    def _ = (Array.set a i (Array.get a j));
    Array.set a j t
  } else error DIMENSION_MISSMATCH
}

def mapToIdx(l: [Dyn]) -> [Int] = {
  def f(i: Int, e: Dyn) -> Int = { i };
  mapi f l
}

def initGuess: <Real> -> Real -> Equations
def (<~) = initGuess

def initEq: <Real> -> <Real> -> Equations
def (~=) = initEq

type Vector2
def vec: Real -> Real -> Vector2
def v2add: Vector2 -> Vector2 -> Vector2
def v2sub: Vector2 -> Vector2 -> Vector2
def v2chsgn: Vector2 -> Vector2
def v2der: Vector2 -> Vector2
def v2prod: Real -> Vector2 -> Vector2
def v2eq: Vector2 -> Vector2 -> Equations

def v2zero = vec 0. 0.
def ii = vec 1. 0.
def jj = vec 0. 1.

def electricEdge: Node -> Node -> <Real> -> <Real> -> Equations
def rotationEdge: Node -> Node -> <Real> -> <Real> -> Equations
def translationEdge: Node -> Node -> Vector2 -> Vector2 -> Equations

type ModelEdge = (Edge, (Dyn, Dyn))
type ScalarEdge = (Edge, (<Real>, <Real>))
type Vector2Edge = (Edge, (Vector2, Vector2))

def mkGraph(mes: [ModelEdge]) -> [Edge] = {
  map (fun me: ModelEdge -> fst me) mes
}

def mkVarsList(mes: [ModelEdge]) -> [(Dyn, Dyn)] = {
  map (fun me: ModelEdge -> snd me) mes
}

type InitVal = (<Real>, (Real, Bool))

def i_(v: Vector2) -> <Real> = {
  match v with
  | vec x _ -> x
  | _ -> error "Invalid Operand"
}

def j_(v: Vector2) -> <Real> = {
  match v with
  | vec _ y -> y
  | _ -> error "Invalid Operand"
}

def mkVec = (fun t: () -> { def x, y: Real; vec x y })
def mkVec(v: (Real, Real)) -> Vector2 = { def (x, y) = v; vec x y }

def v2eqIm(lhs: Vector2, rhs: Vector2) -> Equations = {
  match lhs with
  | vec lx ly -> {
      match rhs with
      | vec rx ry -> lx = rx; ly = ry
      | _ -> error "Invalid RHS"
    }
  | _ -> error "Invalid LHS"
}

def v2addIm(lhs: Vector2, rhs: Vector2) -> Vector2 = {
  match lhs with
  | vec lx ly -> {
      match rhs with
      | vec rx ry -> vec (lx + rx) (ly + ry)
      | _ -> error "Invalid RHS"
    }
  | _ -> error "Invalid LHS"
}

def v2subIm(lhs: Vector2, rhs: Vector2) -> Vector2 = {
  match lhs with
  | vec lx ly -> {
      match rhs with
      | vec rx ry -> vec (lx - rx) (ly - ry)
      | _ -> error "Invalid RHS"
    }
  | _ -> error "Invalid LHS"
}

def v2chsgnIm(v: Vector2) -> Vector2 = {
  match v with
  | vec x y -> vec (-x) (-y)
  | _ -> error "Invalid Operand"
}

def v2prodIm(s: <Real>, v: Vector2) -> Vector2 = {
  match v with
  | vec x y -> vec (s * x) (s * y)
  | _ -> error "Invalid Operand"
}

def v2derIm(v: Vector2) -> Vector2 = {
  match v with
  | vec x y -> vec (der x) (der y)
  | _ -> error "Invalid Operand"
}

def v2norm(v: Vector2) -> <Real> = {
  match v with
  | vec x y -> sqrt (x^(2.) + y^(2.))
  | _ -> error "Invalid Operand"
}

def (==) = v2eq
def (+) = v2add
def (-) = v2sub
def (---) = v2chsgn
def (') = v2der
def (*) = v2prod

def mkVector2UkMap(e: Equations) -> (Vector2 => Vector2) = {
  def work(e: <>, a: (Vector2 => Vector2)) -> (Vector2 => Vector2) = {
    match e with
    | sym: Vector2 -> if Map.mem e a then a else Map.add e (mkVec ()) a
    | e_1 e_2 -> work e_2 (work e_1 a)
    | _ -> a
  };

  work e (Map.empty)
}

def evalVector2Expr(v: Vector2) -> Vector2 = {
  def work(v: Vector2) -> Vector2 = {
    match v with
    | v_1 + v_2 -> v2addIm (work v_1) (work v_2)
    | v_1 - v_2 -> v2subIm (work v_1) (work v_2)
    | r * v -> v2prodIm r (work v)
    | -v -> v2chsgnIm (work v)
    | v' -> v2derIm (work v)
    | vec _ _ -> v
    | sym: Vector2 -> error "Did not expect uknown of Vector2 type here"
    | _ -> error "Unsupported Vector2 construct"
  };

  work v
}

def mkScalarEquations(e: Equations) -> Equations = {
  def work(e: Equations) -> Equations = {
    match e with
    | e_1; e_2 -> work e_1; work e_2
    | v_1 == v_2 -> {
        def v_1 = evalVector2Expr v_1;
        def v_2 = evalVector2Expr v_2;
        v2eqIm v_1 v_2
      }
    | _ -> e
  };
  work e
}

def getElectricEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | electricEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getRotationEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | rotationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getTranslationEdges(e: Equations) -> ([Vector2Edge], Equations) = {
  def work(e: Equations, a: ([Vector2Edge], Equations)) -> ([Vector2Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | translationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getInits(e: Equations) -> ([InitVal], Equations) = {
  def work(e: Equations, a: ([InitVal], Equations)) -> ([InitVal], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | v <- v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, true))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | v <~ v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, false))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | l ~= r -> (fst a, snd a; l = r)
    | _ -> a
  };

  work e ([], NoEqn)
}

def mkCutsetMatrix(mes: [ModelEdge]) -> (MatrixMapInt, (Dyn, Dyn)) = {
  def G = mkGraph mes;
  if hasSelfLoop G then error "Model graph contains self loop"
  else {
    def IM = mkIncidenceMatrix G;
    def _ = logg 2 "IM" (fun t: () -> def _ = dp IM; ());
    def _ = logg 2 "(x, y)" (loggprint (mkVarsList mes));

    def vs = listToArray (mkVarsList mes);

    def work(i: Int, a: MatrixMapInt) -> MatrixMapInt = {
      if i > rdim a then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim a) a));
        if i == j_max then work (i + 1) a
        else {
          def _ = sw vs (i - 1) (j_max - 1);
          work (i + 1) (swcols i j_max a)
        }
      }
    };

    def IMrr = rowreduce IM;
    def _ = logg 2 "IMrr" (fun t: () -> def _ = dp IMrr; ());

    def IMrrt = trimrows IMrr;
    def _ = logg 2 "IMrrt" (fun t: () -> def _ = dp IMrrt; ());

    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def IA = work 1 (real2int IMrrt);
      def _ = logg 2 "IA" (fun t: () -> def _ = dp IA; ());

      def (I, A) = vsplit (rdim IA) IA;
      def T = (if dim A < (1, 1) then arrayToList vs
               else arrayToList (sub vs 0 (rdim A)));
      def C = (if dim A < (1, 1) then []
               else arrayToList (sub vs (rdim A) (Array.length vs)));
      (A, (T, C))
    }
  }
}

def mkTopolRes(bop: (Int -> Dyn -> Dyn -> Dyn), C: MatrixMapInt,
  pvs: [Dyn], svs: [Dyn]) -> [Dyn] = {

  def ipvs = zip (mapToIdx pvs) pvs;
  def jsvs = zip (mapToIdx svs) svs;

  map (fun ipv: (Int, Dyn) -> {
        def (i, pv) = ipv;

        def f(a: Dyn, jsv: (Int, Dyn)) -> Dyn = {
          def (j, sv) = jsv;
          def c = find (i + 1, j + 1) C;
          if c == 0 then a else bop c a sv
        };

        foldLeft f pv jsvs

      }) ipvs
}

def mkScalarTopolEquations(C: MatrixMapInt, pvs: [<Real>], svs: [<Real>], a: Equations)
  -> Equations = {
  def bop(c: Int, l: <Real>, r: <Real>) -> <Real> = { l + (int2real c) * r };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [<Real>], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkVector2TopolEquations(C: MatrixMapInt, pvs: [Vector2], svs: [Vector2], a: Equations)
  -> Equations = {
  def bop(c: Int, l: Vector2, r: Vector2) -> Vector2 = { l + (int2real c) * r };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [Vector2], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r == v2zero)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkTopolEquations(f: (MatrixMapInt -> [Dyn] -> [Dyn] -> Equations -> Equations), mes: [ModelEdge], a: Equations) -> Equations = {
  if isEmpty mes then a else {
    def (A, (T, C)) = mkCutsetMatrix mes;
    def _ = logg 2 "A" (fun t: () -> def _ = dp A; ());

    def (x_t, y_t) = unzip T;
    def (x_c, y_c) = unzip C;

    def _ = logg 2 "x_t" (loggprint x_t);
    def _ = logg 2 "x_c" (loggprint x_c);

    f A y_t y_c (f (- (tr A)) x_c x_t a)
  }
}

def elaborate(e: Equations) -> Equations = {
  def (ees, e) = getElectricEdges e;
  def (ses, e) = getRotationEdges e;
  def (ves, e) = getTranslationEdges e;
  def e = (if isEmpty ses then e else mkTopolEquations mkScalarTopolEquations ees e);
  def e = (if isEmpty ses then e else mkTopolEquations mkScalarTopolEquations ses e);
  def e = (if isEmpty ves then e else  mkTopolEquations mkVector2TopolEquations ves e);
  def ukm = mkVector2UkMap e;
  def e = subs e ukm;
  cleanupEquations (mkScalarEquations e)
}

def GRAVITATIONAL_CONSTANT = 9.81

def Clock(t_0: Real, t: <Real>) = {
  t <- t_0;
  t' <- 1.;
  t' = 1.
}

def ThroughActuator(ff: Vector2, aa: Vector2, n_1: Node, n_2: Node)
  -> Equations = {

  def tt: Vector2;
  translationEdge n_1 n_2 aa tt;
  tt  == ff
}

def ThroughActuator(ff: Vector2, n_1: Node, n_2: Node) -> Equations = {
  def aa: Vector2;
  ThroughActuator ff aa n_1 n_2
}

def ThroughActuator(f: <Real>, a: <Real>, n_1: Node, n_2: Node) -> Equations = {
  def t: Real;
  rotationEdge n_1 n_2 a t;
  t = f
}

def AcrossActuator(ff: Vector2, tt: Vector2, n_1: Node, n_2: Node) -> Equations = {
  def aa: Vector2;
  translationEdge n_1 n_2 aa tt;
  aa == ff
}

def AcrossActuator(ff: Vector2, n_1: Node, n_2: Node) -> Equations = {
  def tt: Vector2;
  AcrossActuator ff tt n_1 n_2
}

def AcrossActuator(f: <Real>, t: <Real>, n_1: Node, n_2: Node) -> Equations = {
  def a: Real;
  rotationEdge n_1 n_2 a t;
  a = f
}

def AcrossActuator(f: <Real>, n_1: Node, n_2: Node) -> Equations = {
  def t: Real;
  AcrossActuator f t n_1 n_2
}

def AcrossController(aa: Vector2, n_1: Node, n_2: Node) -> Equations = {
  ThroughActuator v2zero aa n_1 n_2
}

def AcrossController(a: <Real>, n_1: Node, n_2: Node) -> Equations = {
  ThroughActuator 0. a n_1 n_2
}

def Body(m: Real, I: Real, DATUM: Frame, f: Frame) -> Equations = {
  def rr, vv, FF: Vector2;
  def th, om, T: Real;
  rotationEdge DATUM f th T;
  translationEdge DATUM f rr FF;
  rr' == vv;
  FF == m * vv';
  th' = om;
  T = I * om'
}

def Gravity(m: Real, DATUM: Frame, f: Frame) -> Equations = {
  ThroughActuator (m * GRAVITATIONAL_CONSTANT * jj) DATUM f
}

def RigidArm(l: Real, DATUM: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  def x, y, Fx, Fy: Real;
  def rr = vec x y;
  def FF = vec Fx Fy;
  def th_1, T_1: Real;
  def th_2, T_2: Real;
  rotationEdge f_2 f_1 th_1 T_1;
  rotationEdge DATUM f_2 th_2 T_2;
  translationEdge f_2 f_1 rr FF;
  x = -l * cos th_2;
  y = -l * sin th_2;
  th_1 = 0.;
  T_2 = l * (Fx * -sin th_2 + Fy * cos th_2)
}

def RevoluteJoint(f_1: Frame, f_2: Frame) -> Equations = {
  AcrossActuator (vec 0. 0.) f_1 f_2
}

def Translation(x: Real, y: Real, f_1: Frame, f_2: Frame) -> Equations = {
  AcrossActuator (vec x y) f_1 f_2
  // ; AcrossActuator 0. f_1 f_2
}

def Rotation(th: Real, f_1: Frame, f_2: Frame) -> Equations = {
  AcrossActuator th f_1 f_2
  // ; AcrossActuator (vec 0. 0.) f_1 f_2
}

def RotationalDamper(D: Real, f_1: Frame, f_2: Frame) -> Equations = {
  def th_d, T_d: Real;
  rotationEdge f_1 f_2 th_d T_d;
  T_d = D * th_d'
}
