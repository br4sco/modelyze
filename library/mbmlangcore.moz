/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Matrix
include Graph
include ModelyzeDAE

type Frame = Node

def sw(a: {Dyn}, i: Int, j: Int) -> () = {
  def n = (Array.length a);
  if i < n && 0 <= i && j < n && 0 <= j then {
    def t = (Array.get a i);
    def _ = (Array.set a i (Array.get a j));
    Array.set a j t
  } else error DIMENSION_MISSMATCH
}

def mapToIdx(l: [Dyn]) -> [Int] = {
  def f(i: Int, e: Dyn) -> Int = { i };
  mapi f l
}

def initGuess: <Real> -> Real -> Equations
def (<~) = initGuess

def initEq: <Real> -> <Real> -> Equations
def (~=) = initEq

type Vector3
def vec3: Real -> Real -> Real -> Vector3

def scalarEdge: Node -> Node -> <Real> -> <Real> -> Equations
def vector3edge: Node -> Node -> Vector3 -> Vector3 -> Equations

type ModelEdge = (Edge, (Dyn, Dyn))
type ScalarEdge = (Edge, (<Real>, <Real>))
type vector3edge = (Edge, (Vector3, Vector3))

def mkGraph(mes: [ModelEdge]) -> [Edge] = {
  map (fun me: ModelEdge -> fst me) mes
}

def mkVarsList(mes: [ModelEdge]) -> [(Dyn, Dyn)] = {
  map (fun me: ModelEdge -> snd me) mes
}

type InitVal = (<Real>, (Real, Bool))

def i_(v: Vector3) -> <Real> = {
  match v with
  | vec3 x _ _ -> x
  | _ -> error "Invalid Operand"
}

def j_(v: Vector3) -> <Real> = {
  match v with
  | vec3 _ y _ -> y
  | _ -> error "Invalid Operand"
}

def k_(v: Vector3) -> <Real> = {
  match v with
  | vec3 _ _ z -> z
  | _ -> error "Invalid Operand"
}

def crossProd(l: Vector3, r: Vector3) -> Vector3 = {
  match l with
  | vec3 lx ly lz -> {
      match r with
      | vec3 rx ry rz -> vec3 (ly * rz - lz * ry) (lx * rz - lz * rx) (lx * ry - ly * rx)
      | _ -> error "Right operand invalid"
    }
  | _ -> error "Left operand invalid"
}

def innerProd(l: Vector3, r: Vector3) -> <Real> = {
  match l with
  | vec3 lx ly lz -> {
      match r with
      | vec3 rx ry rz -> lx * rx + ly * ry + lz * rz
      | _ -> error "Right operand invalid"
    }
  | _ -> error "Left operand invalid"
}

def getUknowns(m: Equations) -> [<Real>] = {
  def f(e: (<Real>, (Int, Bool))) -> <Real> = { fst e };
  map f (Map.toList (makeUkMap m))
}

def getScalarEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | scalarEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getvector3edges(e: Equations) -> ([vector3edge], Equations) = {
  def work(e: Equations, a: ([vector3edge], Equations)) -> ([vector3edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | vector3edge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getInits(e: Equations) -> ([InitVal], Equations) = {
  def work(e: Equations, a: ([InitVal], Equations)) -> ([InitVal], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | v <- v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, true))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | v <~ v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, false))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | l ~= r -> (fst a, snd a; l = r)
    | _ -> a
  };

  work e ([], NoEqn)
}

// def getEquations(e: Equations) -> (Equations, Equations) = {
//   def work(e: Equations, a: (Equations, Equations)) -> (Equations, Equations) = {
//     match e with
//     | e_1; e_2 -> ((fst a); e, snd a)
//     | _ -> (fst a, (snd a); e)
//   };
//   work e (NoEqn, NoEqn)
// }

def mkCutsetMatrix(mes: [ModelEdge]) -> (MatrixMapInt, (Dyn, Dyn)) = {
  def G = mkGraph mes;
  if hasSelfLoop G then error "Model graph contains self loop"
  else {
    def IM = mkIncidenceMatrix G;
    def _ = logg 2 "IM" (fun t: () -> def _ = dp IM; ());
    def _ = logg 2 "(x, y)" (loggprint (mkVarsList mes));

    def vs = listToArray (mkVarsList mes);

    def work(i: Int, a: MatrixMapInt) -> MatrixMapInt = {
      if i > rdim a then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim a) a));
        if i == j_max then work (i + 1) a
        else {
          def _ = sw vs (i - 1) (j_max - 1);
          work (i + 1) (swcols i j_max a)
        }
      }
    };

    def IMrr = rowreduce IM;
    def _ = logg 2 "IMrr" (fun t: () -> def _ = dp IMrr; ());

    def IMrrt = trimrows IMrr;
    def _ = logg 2 "IMrrt" (fun t: () -> def _ = dp IMrrt; ());

    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def IA = work 1 (real2int IMrrt);
      def _ = logg 2 "IA" (fun t: () -> def _ = dp IA; ());

      def (I, A) = vsplit (rdim IA) IA;
      def T = (if dim A < (1, 1) then arrayToList vs
               else arrayToList (sub vs 0 (rdim A)));
      def C = (if dim A < (1, 1) then []
               else arrayToList (sub vs (rdim A) (Array.length vs)));
      (A, (T, C))
    }
  }
}

def mkTopolRes(bop: (Int -> Dyn -> Dyn -> Dyn), C: MatrixMapInt,
  pvs: [Dyn], svs: [Dyn]) -> [Dyn] = {

  def ipvs = zip (mapToIdx pvs) pvs;
  def jsvs = zip (mapToIdx svs) svs;

  map (fun ipv: (Int, Dyn) -> {
        def (i, pv) = ipv;

        def f(a: Dyn, jsv: (Int, Dyn)) -> Dyn = {
          def (j, sv) = jsv;
          def c = find (i + 1, j + 1) C;
          if c == 0 then a else bop c a sv
        };

        foldLeft f pv jsvs

      }) ipvs
}

def mkScalarTopolEquations(C: MatrixMapInt, pvs: [<Real>], svs: [<Real>], a: Equations)
  -> Equations = {
  def bop(c: Int, l: <Real>, r: <Real>) -> <Real> = { l + (int2real c) * r };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [<Real>], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkVector2TopolEquations(C: MatrixMapInt, pvs: [Vector3], svs: [Vector3], a: Equations)
  -> Equations = {
  def bop(c: Int, l: Vector3, r: Vector3) -> Vector3 = {
    def c = int2real c;
    vec3 (i_ l + c * i_ r) (j_ l + c * j_ r) (k_ l + c * k_ r)
  };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [Vector3], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; i_ r = 0.; j_ r = 0.; k_ r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkTopolEquations(f: (MatrixMapInt -> [Dyn] -> [Dyn] -> Equations -> Equations), mes: [ModelEdge], a: Equations) -> Equations = {
  def (A, (T, C)) = mkCutsetMatrix mes;
  def _ = logg 2 "A" (fun t: () -> def _ = dp A; ());

  def (x_t, y_t) = unzip T;
  def (x_c, y_c) = unzip C;

  def _ = logg 2 "x_t" (loggprint x_t);
  def _ = logg 2 "x_c" (loggprint x_c);

  f A y_t y_c (f (- (tr A)) x_c x_t a)
}

def elaborate(e: Equations) -> Equations = {
  def (ses, e) = getScalarEdges e;
  def (ves, e) = getvector3edges e;
  def e = (if isEmpty ses then e else mkTopolEquations mkScalarTopolEquations ses e);
  def e = (if isEmpty ves then e else  mkTopolEquations mkVector2TopolEquations ves e);
  cleanupEquations e
}

def GRAVITATIONAL_CONSTANT = 9.81

def Clock(t_0: Real, t: <Real>) = {
  t <- t_0;
  t' <- 1.;
  t' = 1.
}

def ThroughActuator(ff: Vector3, aa: Vector3, n_1: Node, n_2: Node)
  -> Equations = {

  def t_x, t_y, t_z: Real;
  def tt = vec3 t_x t_y t_z;
  vector3edge n_1 n_2 aa tt;
  i_ tt = i_ ff;
  j_ tt = j_ ff;
  k_ tt = k_ ff;
}

def ThroughActuator(ff: Vector3, n_1: Node, n_2: Node) -> Equations = {
  def x_a, y_a, z_a: Real;
  ThroughActuator ff (vec3 x_a y_a z_a) n_1 n_2
}

def ThroughActuator(f: <Real>, a: <Real>, n_1: Node, n_2: Node)
  -> Equations = {

  def t: Real;
  scalarEdge n_1 n_2 a t;
  t = f
}

def AcrossActuator(ff: Vector3, tt: Vector3, n_1: Node, n_2: Node)
  -> Equations = {

  def a_x, a_y, a_z: Real;
  def aa = vec3 a_x a_y a_z;
  vector3edge n_1 n_2 aa tt;
  i_ aa = i_ ff;
  j_ aa = j_ ff;
  k_ aa = k_ ff
}

def AcrossActuator(ff: Vector3, n_1: Node, n_2: Node)
  -> Equations = {

  def t_x, t_y, t_z: Real;
  def tt = vec3 t_x t_y t_z;
  AcrossActuator ff tt n_1 n_2
}

def AcrossActuator(f: <Real>, t: <Real>, n_1: Node, n_2: Node)
  -> Equations = {

  def a: Real;
  scalarEdge n_1 n_2 a t;
  a = f
}

def AcrossActuator(f: <Real>, n_1: Node, n_2: Node) -> Equations = {
  def t: Real;
  AcrossActuator f t n_1 n_2
}

def AcrossController(aa: Vector3, n_1: Node, n_2: Node) -> Equations = {
  ThroughActuator (vec3 0. 0. 0.) aa n_1 n_2
}

def AcrossController(a: <Real>, n_1: Node, n_2: Node) -> Equations = {
  ThroughActuator 0. a n_1 n_2
}

def Body(m: Real, I: Real, DATUM: Frame, f: Frame) -> Equations = {
  def x_m, y_m, z_m, vx_m, vy_m, vz_m, Fx_m, Fy_m, Fz_m, th_m, om_m, T_m: Real;
  def rr = vec3 x_m y_m z_m;
  def vv = vec3 vx_m vy_m vz_m;
  def FF = vec3 Fx_m Fy_m Fz_m;
  scalarEdge DATUM f th_m T_m;
  vector3edge DATUM f rr FF;
  (i_ rr)' = i_ vv;
  (j_ rr)' = j_ vv;
  (k_ rr)' = k_ vv;
  i_ FF = m * (i_ vv)';
  j_ FF = m * (j_ vv)';
  k_ FF = m * (k_ vv)';
  th_m' = om_m;
  T_m = I * om_m'
}

def Gravity(m: Real, DATUM: Frame, f: Frame) -> Equations = {
  ThroughActuator (vec3 0. (m * GRAVITATIONAL_CONSTANT) 0.) DATUM f
}

def RigidArm(x: Real, y: Real, z: Real, DATUM: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  def x_r1, y_r1, z_r1, vx_r1, vy_r1, vz_r1, Fx_r1, Fy_r1, Fz_r1: Real;
  def th_r1, om_r1, T_r1, th_r2, om_r2, T_r2: Real;
  def rr_r1 = vec3 x_r1 y_r1 z_r1;
  def vv_r1 = vec3 vx_r1 vy_r1 vz_r1;
  def FF_r1 = vec3 Fx_r1 Fy_r1 Fz_r1;
  def om_r2_X_rr_r1 = crossProd (vec3 0. 0. om_r2) rr_r1;
  def rr_r1_X_FF_r1 = crossProd rr_r1 FF_r1;
  scalarEdge f_2 f_1 th_r1 T_r1;
  scalarEdge DATUM f_2 th_r2 T_r2;
  vector3edge f_2 f_1 rr_r1 FF_r1;
  i_ rr_r1 = -x;
  j_ rr_r1 = -y;
  k_ rr_r1 = -z;
  i_ vv_r1 = i_ om_r2_X_rr_r1;
  j_ vv_r1 = j_ om_r2_X_rr_r1;
  k_ vv_r1 = k_ om_r2_X_rr_r1;
  th_r1' = om_r1;
  om_r1 = 0.;
  th_r2' = om_r2;
  T_r2 = -(k_ rr_r1_X_FF_r1)
}

// def NoAcceleration(rr: Vector3, vv: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def Fx_i, Fy_i, th_i, T_i: Real;
//   vector3edge f_1 f_2 rr (vec3 Fx_i Fy_i);
//   scalarEdge f_1 f_2 th_i T_i;
//   (i_ rr)' = i_ vv;
//   (j_ rr)' = j_ vv;
//   (i_ vv)' = 0.;
//   (j_ vv)' = 0.;
//   th_i = 0.
// }

// def NoAcceleration(f_1: Frame, f_2: Frame) -> Equations = {
//   def x_i, y_i, vx_i, vy_i: Real;
//   NoAcceleration (vec3 x_i y_i) (vec3 vx_i vy_i) f_1 f_2
// }

// def RevoluteJoint(f_1: Frame, f_2: Frame) -> Equations = {
//   AcrossActuator (vec3 0. 0.) f_1 f_2
// }

// def Bar(m: Real, h: Real, l: Real, DATUM: Frame, we: Frame, c: Frame, ea: Frame) -> Equations = {
//   def I = h * l * (h^2. + l^2.) / 12.;
//   RigidArm (l / 2.) DATUM we c;
//   RigidArm (l / 2.) DATUM c ea;
//   Body m I DATUM c;
//   Gravity m DATUM c
// }

// def Bar(m: Real, h: Real, l: Real, rr: Vector3, th: <Real>, DATUM: Frame, we: Frame, ea: Frame) -> Equations = {
//   def c: Frame;
//   def I = h * l * (h^2. + l^2.) / 12.;
//   RigidArm (l / 2.) DATUM we c;
//   RigidArm (l / 2.) DATUM c ea;
//   Body m I rr th DATUM c;
//   Gravity m DATUM c
// }

// def Translation(x: Real, y: Real, f_1: Frame, f_2: Frame) -> Equations = {
//   AcrossActuator (vec3 x y) f_1 f_2
//   // ; AcrossActuator 0. f_1 f_2
// }

def Rotation(th: Real, f_1: Frame, f_2: Frame) -> Equations = {
  AcrossActuator th f_1 f_2
  // ; AcrossActuator (vec3 0. 0. 0.) f_1 f_2
}

def RotationalDamper(D: Real, f_1: Frame, f_2: Frame) -> Equations = {
  def th_d, T_d: Real;
  scalarEdge f_1 f_2 th_d T_d;
  T_d = D * th_d'
}
