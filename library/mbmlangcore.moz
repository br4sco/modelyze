/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Graph
include Quaternion

def ERROR_UNIT_QUATERNION = "Expected unit quaternion"

type Frame = Node

def sw(a: {Dyn}, i: Int, j: Int) -> () = {
  def n = (Array.length a);
  if i < n && 0 <= i && j < n && 0 <= j then {
    def t = (Array.get a i);
    def _ = (Array.set a i (Array.get a j));
    Array.set a j t
  } else error DIMENSION_MISSMATCH
}

def mapToIdx(l: [Dyn]) -> [Int] = {
  def f(i: Int, e: Dyn) -> Int = { i };
  mapi f l
}

def electricalEdge: Node -> Node -> <Real> -> <Real> -> Equations
def planarRotationEdge: Node -> Node -> <Real> -> <Real> -> Equations
def translationEdge: Node -> Node -> Vector3 -> Vector3 -> Equations
def angularVelocityEdge: Node -> Node -> Vector3 -> Vector3 -> Equations
def rotationEdge: Node -> Node -> Quaternion -> Vector3 -> Equations

type ModelEdge = (Edge, (Dyn, Dyn))
type ScalarEdge = (Edge, (<Real>, <Real>))
type Vector3Edge = (Edge, (Vector3, Vector3))
type QuaternionVector3Edge = (Edge, (Quaternion, Vector3))

def mkGraph(mes: [ModelEdge]) -> [Edge] = {
  map (fun me: ModelEdge -> fst me) mes
}

def mkVarsList(mes: [ModelEdge]) -> [(Dyn, Dyn)] = {
  map (fun me: ModelEdge -> snd me) mes
}

def getElectricalEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | electricalEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getPlanarRotationEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | planarRotationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getTranslationEdges(e: Equations) -> ([Vector3Edge], Equations) = {
  def work(e: Equations, a: ([Vector3Edge], Equations)) -> ([Vector3Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | translationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getAngularVelocityEdges(e: Equations) -> ([Vector3Edge], Equations) = {
  def work(e: Equations, a: ([Vector3Edge], Equations)) -> ([Vector3Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | angularVelocityEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getRotationEdges(e: Equations) -> ([QuaternionVector3Edge], Equations) = {
  def work(e: Equations, a: ([QuaternionVector3Edge], Equations)) -> ([QuaternionVector3Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | rotationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def mkCutsetMatrix(mes: [ModelEdge]) -> (MatrixMapInt, (Dyn, Dyn)) = {
  def G = mkGraph mes;
  if hasSelfLoop G then error "Model graph contains self loop"
  else {
    def IM = mkIncidenceMatrix G;
    def _ = logg 2 "IM" (fun t: () -> def _ = dp IM; ());
    def _ = logg 2 "(x, y)" (loggprint (mkVarsList mes));

    def vs = listToArray (mkVarsList mes);

    def work(i: Int, a: MatrixMapInt) -> MatrixMapInt = {
      if i > rdim a then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim a) a));
        if i == j_max then work (i + 1) a
        else {
          def _ = sw vs (i - 1) (j_max - 1);
          work (i + 1) (swcols i j_max a)
        }
      }
    };

    def IMrr = rowreduce IM;
    def _ = logg 2 "IMrr" (fun t: () -> def _ = dp IMrr; ());

    def IMrrt = trimrows IMrr;
    def _ = logg 2 "IMrrt" (fun t: () -> def _ = dp IMrrt; ());

    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def IA = work 1 (real2int IMrrt);
      def _ = logg 2 "IA" (fun t: () -> def _ = dp IA; ());

      def (I, A) = vsplit (rdim IA) IA;
      def T = (if dim A < (1, 1) then arrayToList vs
               else arrayToList (sub vs 0 (rdim A)));
      def C = (if dim A < (1, 1) then []
               else arrayToList (sub vs (rdim A) (Array.length vs)));
      (A, (T, C))
    }
  }
}

def mkTopolRes(bop: (Int -> Dyn -> Dyn -> Dyn), C: MatrixMapInt,
  pvs: [Dyn], svs: [Dyn]) -> [Dyn] = {

  def ipvs = zip (mapToIdx pvs) pvs;
  def jsvs = zip (mapToIdx svs) svs;

  map (fun ipv: (Int, Dyn) -> {
        def (i, pv) = ipv;

        def f(a: Dyn, jsv: (Int, Dyn)) -> Dyn = {
          def (j, sv) = jsv;
          def c = find (i + 1, j + 1) C;
          if c == 0 then a else bop c a sv
        };

        foldLeft f pv jsvs

      }) ipvs
}

def mkScalarTopolEquations(C: MatrixMapInt, pvs: [<Real>], svs: [<Real>], a: Equations) -> Equations = {
  def bop(c: Int, l: <Real>, r: <Real>) -> <Real> = { l + (int2real c) * r };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [<Real>], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkVector3TopolEquations(C: MatrixMapInt, pvs: [Vector3], svs: [Vector3], a: Equations)
  -> Equations = {
  def bop(c: Int, l: Vector3, r: Vector3) -> Vector3 = {
    def c = int2real c;
    l + c * r
  };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [Vector3], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r == zero3)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkQuaternionTopolEquations(C: MatrixMapInt, pvs: [Quaternion], svs: [Quaternion], a: Equations)
  -> Equations = {
  def bop(c: Int, l: Quaternion, r: Quaternion) -> Quaternion = {
    if c == 1 then l * r
    else if c == -1 then l * (qconj r)
    else if c == 0 then l
    else error "Expected matrix elements to be -1, 0, or 1 "
  };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [Quaternion], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r ==. idq)
    | _ -> error "Unmatched"
  };

  work rs a
}

type ResidualFunction = MatrixMapInt -> [Dyn] -> [Dyn] -> Equations -> Equations
def mkTopolEquations(f_a: ResidualFunction, f_t: ResidualFunction, mes: [ModelEdge], a: Equations) -> Equations = {
  def (A, (T, C)) = mkCutsetMatrix mes;
  def _ = logg 2 "A" (fun t: () -> def _ = dp A; ());

  def (x_t, y_t) = unzip T;
  def (x_c, y_c) = unzip C;

  def _ = logg 2 "x_t" (loggprint x_t);
  def _ = logg 2 "x_c" (loggprint x_c);

  f_t A y_t y_c (f_a (- (tr A)) x_c x_t a)
}

def elaborate(e: Equations) -> Equations = {
  def (ees, e) = getElectricalEdges e;
  def (pres, e) = getPlanarRotationEdges e;
  def (tes, e) = getTranslationEdges e;
  def (aves, e) = getAngularVelocityEdges e;
  def (res, e) = getRotationEdges e;
  def e = (if isEmpty ees then e else mkTopolEquations mkScalarTopolEquations mkScalarTopolEquations ees e);
  def e = (if isEmpty pres then e else mkTopolEquations mkScalarTopolEquations mkScalarTopolEquations pres e);
  def e = (if isEmpty tes then e else mkTopolEquations mkVector3TopolEquations mkVector3TopolEquations tes e);
  def e = (if isEmpty aves then e else mkTopolEquations mkVector3TopolEquations mkVector3TopolEquations aves e);
  def e = (if isEmpty res then e else mkTopolEquations mkQuaternionTopolEquations mkVector3TopolEquations res e);
  e
}

def GRAVITATIONAL_CONSTANT = 9.81
def CORRECTION_SPEED = 1.0
def EPSILON = 1.e-10

def norm2(v: (Real, Real, Real)) = {
  def (x, y, z) = v;
  x^2. + y^2. + z^2.
}

def norm2(q: (Real, Real, Real, Real)) = {
  def (w, i, j, k) = q;
  w^2. + i^2. + j^2. + k^2.
}

def conj(q: (Real, Real, Real, Real)) = {
  def (w, i, j, k) = q;
  (w, -i, -j, -k)
}

def ea2quat(th: Real, x: Real, y: Real, z: Real) = {
  def n = sqrt(x^2. + y^2. + z^2.);
  (cos (th / 2.), (x / n) * sin (th / 2.), (y / n) * sin (th / 2.), (z / n) * sin (th / 2.))
}

def Clock(t_0: Real, t: <Real>) = {
  t <- t_0;
  t' <- 1.;
  t' = 1.
}

// def TorqueActuator(f: Vector3, q: Quaternion, f_1: Frame, f_2: Frame) -> Equations = {
//   def T_a, om_a: Vector3;
//   angularVelocityEdge f_1 f_2 om_a T_a;

//   // norm2 q ~= 1.;
//   // q' ==. 0.5 * (q_ om_a) * q;
//   om_a == qim (2. * q' * (qconj q));
//   norm2 q = 1.;

//   T_a == f
// }

// def TorqueActuator(f: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def q_a: Quaternion;
//   TorqueActuator f q_a f_1 f_2
// }

// def ForceActuator(f: Vector3, r: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def F_a: Vector3;
//   translationEdge f_1 f_2 r F_a;
//   F_a == f
// }

// def ForceActuator(f: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def r_a: Vector3;
//   ForceActuator f r_a f_1 f_2
// }

// def TranslationActuator(f: Vector3, F: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def r_a: Vector3;
//   translationEdge f_1 f_2 r_a F;
//   r_a == f
// }

// def TranslationActuator(f: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
//   def F_a: Vector3;
//   TranslationActuator f F_a f_1 f_2
// }

def RotationSensor(q: Quaternion, f_1: Frame, f_2: Frame) -> Equations = {
  def om, T: Vector3;
  rotationEdge f_1 f_2 q T;
  // angularVelocityEdge f_1 f_2 om T;
  // q' ==. 0.5 * (q_ om) * q + CORRECTION_SPEED * (1. - sqrt(norm2 q)) * q;
  T == zero3
}

def TranslationSensor(r: Vector3, f_1: Frame, f_2: Frame) -> Equations = {
  def F: Vector3;
  translationEdge f_1 f_2 r F;
  F == zero3
}

def _Body(m: Real, I: (Real, Real, Real), r: Vector3, q: Quaternion, world: Frame, f: Frame) -> Equations = {
  def (I_xx, I_yy, I_zz) = I;
  def I = vec3 I_xx I_yy I_zz;
  def v, F, om, T: Vector3;
  translationEdge world f r F;
  // angularVelocityEdge world f om T;
  rotationEdge world f q T;

  q' ==. 0.5 * (q_ om) * q + CORRECTION_SPEED * (1. - sqrt(norm2 q)) * q;

  r' == v;
  F == m * v';
  T == I *. om' + cross om (I *. om)
}

def Body(m: Real, I: (Real, Real, Real), r_0: (Real, Real, Real), q_0: (Real, Real, Real, Real), world: Frame, f: Frame) -> Equations = {
  def x_m, y_m, z_m, w_m, i_m, j_m, k_m: Real;
  def r = vec3 x_m y_m z_m;
  def q = quat w_m i_m j_m k_m;

  if abs (norm2 q_0 - 1.) < EPSILON then {
    r <~~ mkVec3 r_0;
    q <~~. mkQuat q_0;
    _Body m I r q world f
  } else error ERROR_UNIT_QUATERNION
}

def Body(m: Real, I: (Real, Real, Real), q_0: (Real, Real, Real, Real), world: Frame, f: Frame) -> Equations = {
  def x_m, y_m, z_m, w_m, i_m, j_m, k_m: Real;
  def r = vec3 x_m y_m z_m;
  def q = quat w_m i_m j_m k_m;

  if abs (norm2 q_0 - 1.) < EPSILON then {
    q <~~. mkQuat q_0;
    _Body m I r q world f
  } else error ERROR_UNIT_QUATERNION
}

def Body(m: Real, I: (Real, Real, Real), world: Frame, f: Frame) -> Equations = {
  Body m I (1., 0., 0., 0.) world f
}

def Gravity(m: Real, world: Frame, f: Frame) -> Equations = {
  def r, F: Vector3;
  translationEdge world f r F;
  F == m * GRAVITATIONAL_CONSTANT * jj
}

def SphericalJoint(f_1: Frame, f_2: Frame) -> Equations = {
  def r, F: Vector3;
  translationEdge f_1 f_2 r F;
  r <~~ zero3;
  r == zero3
}

def _RigidArm(r: (Real, Real, Real), r_1: Vector3, q_2: Quaternion, world: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  def F_1, om_1, om_2, T_1, T_2: Vector3;
  def q_1: Quaternion;

  translationEdge f_2 f_1 r_1 F_1;
  // angularVelocityEdge f_2 f_1 om_1 T_1;
  // angularVelocityEdge world f_2 om_2 T_2;
  // q_1' ==. 0.5 * (q_ om_1) * q_1 + CORRECTION_SPEED * (1. - sqrt(norm2 q_1)) * q_1;
  // q_2' ==. 0.5 * (q_ om_2) * q_2 + CORRECTION_SPEED * (1. - sqrt(norm2 q_2)) * q_2;
  rotationEdge f_2 f_1 q_1 T_1;
  rotationEdge world f_2 q_2 T_2;

  q_1 ==. idq;
  r_1 == L q_2 (mkVec3 r);
  T_2 == cross (-r_1) F_1
}

def RigidArm(r: (Real, Real, Real), q_2_0: (Real, Real, Real, Real), world: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  def r_1: Vector3;
  def q_2: Quaternion;
  if abs (norm2 q_2_0 - 1.) < EPSILON then {
    def q_2_0 = mkQuat q_2_0;
    r_1 <~~ L q_2_0 (mkVec3 r);
    q_2 <~~. q_2_0;
    _RigidArm r r_1 q_2 world f_1 f_2
  } else error ERROR_UNIT_QUATERNION
}

def RigidArm(r: (Real, Real, Real), world: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  RigidArm r (1., 0., 0., 0.) world f_1 f_2
}
