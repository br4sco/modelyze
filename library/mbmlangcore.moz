/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Matrix
include Graph
include ModelyzeDAE

type Frame = Node

def sw(a: {Dyn}, i: Int, j: Int) -> () = {
  def n = (Array.length a);
  if i < n && 0 <= i && j < n && 0 <= j then {
    def t = (Array.get a i);
    def _ = (Array.set a i (Array.get a j));
    Array.set a j t
  } else error DIMENSION_MISSMATCH
}

def mapToIdx(l: [Dyn]) -> [Int] = {
  def f(i: Int, e: Dyn) -> Int = { i };
  mapi f l
}

def initGuess: <Real> -> Real -> Equations
def (<~) = initGuess

def initEq: <Real> -> <Real> -> Equations
def (~=) = initEq

type Vector3
def vec3: Real -> Real -> Real -> Vector3

type RotMatrix
def rotM: Real -> Real -> Real -> RotMatrix

def scalarEdge: Node -> Node -> <Real> -> <Real> -> Equations
def translationEdge: Node -> Node -> Vector3 -> Vector3 -> Equations
def rotationEdge: Node -> Node -> RotMatrix -> Vector3 -> Equations
// def rotationEdge: Node -> Node -> Vector3 -> Vector3 -> Equations

type ModelEdge = (Edge, (Dyn, Dyn))
type ScalarEdge = (Edge, (<Real>, <Real>))
type Vector3Edge = (Edge, (Vector3, Vector3))
type MatrixVector3Edge = (Edge, (RotMatrix, Vector3))

def mkGraph(mes: [ModelEdge]) -> [Edge] = {
  map (fun me: ModelEdge -> fst me) mes
}

def mkVarsList(mes: [ModelEdge]) -> [(Dyn, Dyn)] = {
  map (fun me: ModelEdge -> snd me) mes
}

type InitVal = (<Real>, (Real, Bool))

def mkVec3 = fun t: () -> { def x, y, z: Real; vec3 x y z }

def x_(v: Vector3) -> <Real> = {
  match v with
  | vec3 x _ _ -> x
  | _ -> error "Invalid Operand"
}

def y_(v: Vector3) -> <Real> = {
  match v with
  | vec3 _ y _ -> y
  | _ -> error "Invalid Operand"
}

def z_(v: Vector3) -> <Real> = {
  match v with
  | vec3 _ _ z -> z
  | _ -> error "Invalid Operand"
}

def al_(R: RotMatrix) -> <Real> = {
  match R with
  | rotM al _ _ -> al
  | _ -> error "Invalid Operand"
}

def be_(R: RotMatrix) -> <Real> = {
  match R with
  | rotM _ be _ -> be
  | _ -> error "Invalid Operand"
}

def ga_(R: RotMatrix) -> <Real> = {
  match R with
  | rotM _ _ ga -> ga
  | _ -> error "Invalid Operand"
}

def Meq(l: MatrixMapSReal, r: MatrixMapSReal) -> Equations = {
  if dim l == dim r then {
    def f(a: Equations, ij: Pos) -> Equations = { a; (find ij l) = (find ij r) };
    foldij f NoEqn l
  } else error "Matrix dimensions does not match"
}

def mkRotationMatrix(R: RotMatrix) -> MatrixMapSReal = {
  def z: <Real> = 0.;
  def u: <Real> = 1.;
  def al = al_ R;
  def be = be_ R;
  def ga = ga_ R;

  def R_x(th: <Real>) = listToMatrix [[u, z, z],
                                      [z, cos th, -sin th],
                                      [z, sin th, cos th]] (mmSRealZero (3, 3));

  def R_y(th: <Real>) = listToMatrix [[cos th, z, sin th],
                                      [z, u, z],
                                      [-sin th, z, cos th]] (mmSRealZero (3, 3));

  def R_z(th: <Real>) = listToMatrix [[cos th, -sin th, z],
                                      [sin th, cos th, z],
                                      [z, z, u]] (mmSRealZero (3, 3));
  R_z(ga) * R_x(be) * R_z(al)
  // R_z(al)
}

def mkAngularVelocityVector3(R: RotMatrix) -> Vector3 = {
  def al = al_ R;
  def be = be_ R;
  def ga = ga_ R;
  vec3
       (al' * sin be * sin ga + be' * cos ga)
       (al' * sin be * cos ga - be' * sin ga)
       (al' * cos be + ga')
  // vec3 0. 0. (al')
}

def Rot(R: RotMatrix, v: Vector3) -> Vector3 = {
  def M = mkRotationMatrix R;
  def v = listToMatrix [[x_ v], [y_ v], [z_ v]] (mmSRealZero (3, 1));
  def v = M * v;
  vec3 (find (1, 1) v) (find (2, 1) v) (find (3, 1) v)
}

def crossProd(l: Vector3, r: Vector3) -> Vector3 = {
  match l with
  | vec3 lx ly lz -> {
      match r with
      | vec3 rx ry rz -> vec3 (ly * rz - lz * ry) (lx * rz - lz * rx) (lx * ry - ly * rx)
      | _ -> error "Right operand invalid"
    }
  | _ -> error "Left operand invalid"
}

def dotProd(l: Vector3, r: Vector3) -> <Real> = {
  match l with
  | vec3 lx ly lz -> {
      match r with
      | vec3 rx ry rz -> lx * rx + ly * ry + lz * rz
      | _ -> error "Right operand invalid"
    }
  | _ -> error "Left operand invalid"
}

def scalarProd(l: <Real>, r: Vector3) -> Vector3 = { vec3 (l * x_ r) (l * y_ r) (l * z_ r) }

def v3eq(l: Vector3, r: Vector3) -> Equations = { x_ l = x_ r; y_ l = y_ r; z_ l = z_ r }

def v3der(v: Vector3) -> Vector3 = { vec3 ((x_ v)') ((y_ v)') ((z_ v)') }

def getUknowns(m: Equations) -> [<Real>] = {
  def f(e: (<Real>, (Int, Bool))) -> <Real> = { fst e };
  map f (Map.toList (makeUkMap m))
}

def getScalarEdges(e: Equations) -> ([ScalarEdge], Equations) = {
  def work(e: Equations, a: ([ScalarEdge], Equations)) -> ([ScalarEdge], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | scalarEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getTranslationEdges(e: Equations) -> ([Vector3Edge], Equations) = {
  def work(e: Equations, a: ([Vector3Edge], Equations)) -> ([Vector3Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | translationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

def getRotationEdges(e: Equations) -> ([MatrixVector3Edge], Equations) = {
  def work(e: Equations, a: ([MatrixVector3Edge], Equations)) -> ([MatrixVector3Edge], Equations) = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | rotationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)
  };

  work e ([], NoEqn)
}

// def getRotationEdges(e: Equations) -> ([Vector3Edge], Equations) = {
//   def work(e: Equations, a: ([Vector3Edge], Equations)) -> ([Vector3Edge], Equations) = {
//     match e with
//     | e_1; e_2 -> work e_2 (work e_1 a)
//     | rotationEdge n_1 n_2 x y -> (((n_1, n_2), (x, y))::(fst a), snd a)
//     | _ -> (fst a, (snd a); e)
//   };

//   work e ([], NoEqn)
// }

def getInits(e: Equations) -> ([InitVal], Equations) = {
  def work(e: Equations, a: ([InitVal], Equations)) -> ([InitVal], Equations)  = {
    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | v <- v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, true))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | v <~ v_0 -> {
        match (v, v_0) with
        | (v, lift v_0: Real) -> ((v, (v_0, false))::(fst a), snd a)
        | _ -> error "Invalid init"
      }
    | l ~= r -> (fst a, snd a; l = r)
    | _ -> a
  };

  work e ([], NoEqn)
}

// def getEquations(e: Equations) -> (Equations, Equations) = {
//   def work(e: Equations, a: (Equations, Equations)) -> (Equations, Equations) = {
//     match e with
//     | e_1; e_2 -> ((fst a); e, snd a)
//     | _ -> (fst a, (snd a); e)
//   };
//   work e (NoEqn, NoEqn)
// }

def mkCutsetMatrix(mes: [ModelEdge]) -> (MatrixMapInt, (Dyn, Dyn)) = {
  def G = mkGraph mes;
  if hasSelfLoop G then error "Model graph contains self loop"
  else {
    def IM = mkIncidenceMatrix G;
    def _ = logg 2 "IM" (fun t: () -> def _ = dp IM; ());
    def _ = logg 2 "(x, y)" (loggprint (mkVarsList mes));

    def vs = listToArray (mkVarsList mes);

    def work(i: Int, a: MatrixMapInt) -> MatrixMapInt = {
      if i > rdim a then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim a) a));
        if i == j_max then work (i + 1) a
        else {
          def _ = sw vs (i - 1) (j_max - 1);
          work (i + 1) (swcols i j_max a)
        }
      }
    };

    def IMrr = rowreduce IM;
    def _ = logg 2 "IMrr" (fun t: () -> def _ = dp IMrr; ());

    def IMrrt = trimrows IMrr;
    def _ = logg 2 "IMrrt" (fun t: () -> def _ = dp IMrrt; ());

    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def IA = work 1 (real2int IMrrt);
      def _ = logg 2 "IA" (fun t: () -> def _ = dp IA; ());

      def (I, A) = vsplit (rdim IA) IA;
      def T = (if dim A < (1, 1) then arrayToList vs
               else arrayToList (sub vs 0 (rdim A)));
      def C = (if dim A < (1, 1) then []
               else arrayToList (sub vs (rdim A) (Array.length vs)));
      (A, (T, C))
    }
  }
}

def mkTopolRes(bop: (Int -> Dyn -> Dyn -> Dyn), C: MatrixMapInt,
  pvs: [Dyn], svs: [Dyn]) -> [Dyn] = {

  def ipvs = zip (mapToIdx pvs) pvs;
  def jsvs = zip (mapToIdx svs) svs;

  map (fun ipv: (Int, Dyn) -> {
        def (i, pv) = ipv;

        def f(a: Dyn, jsv: (Int, Dyn)) -> Dyn = {
          def (j, sv) = jsv;
          def c = find (i + 1, j + 1) C;
          if c == 0 then a else bop c a sv
        };

        foldLeft f pv jsvs

      }) ipvs
}

def mkScalarTopolEquations(C: MatrixMapInt, pvs: [<Real>], svs: [<Real>], a: Equations) -> Equations = {
  def bop(c: Int, l: <Real>, r: <Real>) -> <Real> = { l + (int2real c) * r };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [<Real>], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}

def mkVector3TopolEquations(C: MatrixMapInt, pvs: [Vector3], svs: [Vector3], a: Equations)
  -> Equations = {
  def bop(c: Int, l: Vector3, r: Vector3) -> Vector3 = {
    def c = int2real c;
    vec3 (x_ l + c * x_ r) (y_ l + c * y_ r) (z_ l + c * z_ r)
  };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [Vector3], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; x_ r = 0.; y_ r = 0.; z_ r = 0.)
    | _ -> error "Unmatched"
  };

  work rs a
}


def mkMatrixTopolEquations(C: MatrixMapInt, pvs: [RotMatrix], svs: [RotMatrix], a: Equations)
  -> Equations = {

  def pvs = map (fun R: RotMatrix -> mkRotationMatrix R) pvs;
  def svs = map (fun R: RotMatrix -> mkRotationMatrix R) svs;

  def bop(c: Int, l: MatrixMapSReal, r: MatrixMapSReal) -> MatrixMapSReal = {
    if c == 1 then {
      l * r
    } else if c == -1 then {
      l * (tr r)
    } else error "Expected non-zero matrix elements to be -1 or 1"
  };
  def rs = mkTopolRes bop C pvs svs;

  def work(rs: [MatrixMapSReal], a: Equations) -> Equations = {
    match rs with
    | [] -> a
    | r::rs -> work rs (a; (find (1, 1) r) = 1.
                           ;(find (2, 2) r) = 1.; (find (3, 3) r) = 1.
                       )
    | _ -> error "Unmatched"
  };

  work rs a
}

type ResidualFunction = MatrixMapInt -> [Dyn] -> [Dyn] -> Equations -> Equations
def mkTopolEquations(f_a: ResidualFunction, f_t: ResidualFunction, mes: [ModelEdge], a: Equations) -> Equations = {
  def (A, (T, C)) = mkCutsetMatrix mes;
  def _ = logg 2 "A" (fun t: () -> def _ = dp A; ());

  def (x_t, y_t) = unzip T;
  def (x_c, y_c) = unzip C;

  def _ = logg 2 "x_t" (loggprint x_t);
  def _ = logg 2 "x_c" (loggprint x_c);

  f_t A y_t y_c (f_a (- (tr A)) x_c x_t a)
}

def elaborate(e: Equations) -> Equations = {
  def (ses, e) = getScalarEdges e;
  def (tes, e) = getTranslationEdges e;
  def (res, e) = getRotationEdges e;
  def e = (if isEmpty ses then e else mkTopolEquations mkScalarTopolEquations mkScalarTopolEquations ses e);
  def e = (if isEmpty tes then e else mkTopolEquations mkVector3TopolEquations mkVector3TopolEquations tes e);
  def e = (if isEmpty res then e else mkTopolEquations mkMatrixTopolEquations mkVector3TopolEquations res e);
  cleanupEquations e
}

def GRAVITATIONAL_CONSTANT = 9.81

def Clock(t_0: Real, t: <Real>) = {
  t <- t_0;
  t' <- 1.;
  t' = 1.
}

def Body(m: Real, I: (Real, Real, Real), DATUM: Frame, f: Frame) -> Equations = {
  def (I_xx, I_yy, I_zz) = I;
  def x_m, y_m, z_m, vx_m, vy_m, vz_m, Fx_m, Fy_m, Fz_m: Real;
  def al_m, be_m, ga_m, omx_m, omy_m, omz_m, Tx_m, Ty_m, Tz_m: Real;

  def r = vec3 x_m y_m z_m;
  def v = vec3 vx_m vy_m vz_m;
  def F = vec3 Fx_m Fy_m Fz_m;

  def R = rotM al_m be_m ga_m;
  def om = vec3 omx_m omy_m omz_m;
  def T = vec3 Tx_m Ty_m Tz_m;

  // be_m = 0.;
  // ga_m = 0.;

  rotationEdge DATUM f R T;
  translationEdge DATUM f r F;

  v3eq (v3der r) v;
  v3eq (F) (scalarProd m (v3der v));
  v3eq om (mkAngularVelocityVector3 R);

  x_ T = (I_xx * (x_ om)' + (I_zz - I_yy) * y_ om * z_ om);
  y_ T = (I_yy * (y_ om)' + (I_xx - I_zz) * z_ om * x_ om);
  z_ T = (I_zz * (z_ om)' + (I_yy - I_xx) * x_ om * y_ om)
}

def Gravity(m: Real, DATUM: Frame, f: Frame) -> Equations = {
  def x_g, y_g, z_g, Fx_g, Fy_g, Fz_g: Real;
  def r = vec3 x_g y_g z_g;
  def F = vec3 Fx_g Fy_g Fz_g;
  translationEdge DATUM f r F;
  v3eq F (vec3 0. (m * GRAVITATIONAL_CONSTANT) 0.)
}

def SphericalJoint(f_1: Frame, f_2: Frame) -> Equations = {
  def x_h, y_h, z_h, Fx_h, Fy_h, Fz_h: Real;
  def r = vec3 x_h y_h z_h;
  def F = vec3 Fx_h Fy_h Fz_h;
  translationEdge f_1 f_2 r F;
  v3eq r (vec3 0. 0. 0.)
}

def RigidArm(x: Real, y: Real, z: Real, DATUM: Frame, f_1: Frame, f_2: Frame) -> Equations = {
  def x_r1, y_r1, z_r1, vx_r1, vy_r1, vz_r1, Fx_r1, Fy_r1, Fz_r1: Real;
  def r_1 = vec3 x_r1 y_r1 z_r1;
  def F_1 = vec3 Fx_r1 Fy_r1 Fz_r1;

  def al_r1, be_r1, ga_r1, omx_r1, omy_r1, omz_r1, Tx_r1, Ty_r1, Tz_r1: Real;
  def R_1 = rotM al_r1 be_r1 ga_r1;
  def T_1 = vec3 Tx_r1 Ty_r1 Tz_r1;

  def al_r2, be_r2, ga_r2, omx_r2, omy_r2, omz_r2, Tx_r2, Ty_r2, Tz_r2: Real;
  def R_2 = rotM al_r2 be_r2 ga_r2;
  def T_2 = vec3 Tx_r2 Ty_r2 Tz_r2;

  def r = vec3 x y z;
  // be_r2 = 0.;
  // ga_r2 = 0.;

  translationEdge f_2 f_1 r_1 F_1;
  rotationEdge f_2 f_1 R_1 T_1;
  rotationEdge DATUM f_1 R_2 T_2;

  al_r1 = 0.;
  be_r1 = 0.;
  ga_r1 = 0.;
  v3eq r_1 (Rot R_2 (scalarProd (-1.) r));
  v3eq T_2 (crossProd (Rot R_2 r) F_1)
}
