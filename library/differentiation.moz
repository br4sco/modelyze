/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Equation
type DerivMap = (Signal => Signal)
type DerivList = [(Signal,Signal)]
def hoDer : <Real -> Int -> Real>

//Extract equations of form  der x = dx, as well as recording such
//equations where higher-order derivatives will be generated after
//differentiation. Reuse symbols from and old dmap if available. THis
//is necessary for a structurally hybrid system, so that the same 
//differentiated symbols are mapped back to old values.
def extractDerivatives(eqs:Equations, dmap:DerivMap, olddmap:DerivMap) ->(Equations,DerivMap) = {
  def makeHOder(x:Signal, k:Int, dmap:DerivMap) -> DerivMap = {
    if k > 1 then 
      if Map.mem x dmap then makeHOder (Map.find x dmap) (k - 1) dmap
      else 
        if Map.mem x olddmap then {
          def dx = (Map.find x olddmap);
          makeHOder dx (k - 1) (Map.add x dx dmap);
        }
        else{
          def u:Signal;
          makeHOder u (k - 1) (Map.add x u dmap);
        }
    else dmap
  };
  def extractHOder(expr:Expr, k:Int, dmap:DerivMap) -> DerivMap = {
    match expr with
    | der e -> extractHOder(e,k + 1,dmap)
    | sym:Signal -> makeHOder(expr,k,dmap)
    | e1 e2 -> extractHOder(e2,k,extractHOder(e1,k,dmap))
    | _ -> dmap
  };
  match eqs with
  | e1 ; e2 -> {    
      def (e1b,dmap1) = extractDerivatives(e1,dmap,olddmap);
      def (e2b,dmap2) = extractDerivatives(e2,dmap1,olddmap);
      (match (e1b,e2b) with
       | (~NoEqn,~NoEqn) -> (NoEqn,dmap2)
       | (~NoEqn,_)     -> (e2b,dmap2)
       | (_,~NoEqn)     -> (e1b,dmap2)
       | (_,_)         -> (e1b;e2b,dmap2))
    }
  | der sym:Signal = sym:Signal ->
      (match eqs with | der x = dx -> (NoEqn,Map.add x dx dmap))
  | sym:Signal = der sym:Signal ->
      (match eqs with | dx = der x -> (NoEqn,Map.add x dx dmap))
  | _ -> (eqs,extractHOder eqs 0 dmap)
}

//Symbolically differentiate a model (higher-order).
//Currently cannot user derfined functions be automatically differentiated
def differentiateModel(expr:Expr) -> Expr = {
  def eulerNumber = 2.71828182845904523536;
  def sdiff(expr:Signal) -> Signal = {
    match expr with
    | sym:Signal -> hoDer expr 1
    | hoDer x (sval k:Int) -> hoDer x (k + 1)
    | der e -> sdiff(sdiff(e))
    | e1 + e2 -> sdiff(e1) + sdiff(e2)
    | e1 - e2 -> sdiff(e1) - sdiff(e2)
    | e1 * e2 -> sdiff(e1) * e2 + e1 * sdiff(e2)
    | e1 / e2 -> (sdiff(e1) * e2 - e1 * sdiff(e2)) / (e2 * e2)
    | ~sin e -> sdiff(e) * cos(e)
    | ~cos e -> sdiff(e) * -(sin(e))
    | ~tan e -> sdiff(e) * 1./(cos(e))^2.
    | ~asin e -> sdiff(e) * (1. / (sqrt(1. - e^2.)))
    | ~acos e -> sdiff(e) * -(1. / (sqrt(1. - e^2.)))
    | ~atan e -> sdiff(e) * (1. / (1. + e^2.))
    | ~sinh e -> sdiff(e) * cosh(e)
    | ~cosh e -> sdiff(e) * sinh(e)
    | ~tanh e -> sdiff(e) * (1. / (cosh e)^2.) 
    | ~log e -> sdiff(e)/ e
    | ~log10 e -> sdiff(e)* log10(eulerNumber) / e 
    | ~sqrt e -> sdiff(e)/ (2.*(sqrt e))
    | e1 ^ (sval k:Real) -> (k * e1 ^ (k - 1.)) * sdiff(e1)
    | -e -> -(sdiff(e))
    | sval x:Real -> 0. 
    | _ -> error "Cannot differentiate model"
  };
  match expr with
  | der e -> sdiff e
  | e1 e2 -> (differentiateModel e1)  (differentiateModel e2) 
  | _ -> expr
}

//Remove higher-order derivatives and replace them with new unknowns
//representing chains of derivatives.
def removeHOderivatives(expr:Expr, dmap:DerivMap) -> Expr = {
  def getDeriv(x:Signal, k:Int) -> Expr = {
    if k > 1 then getDeriv (Map.find x dmap) (k - 1)
    else 
      if Map.mem x dmap then Map.find x dmap
      else der x
  };
  match expr with
  | hoDer x (sval k:Int) -> getDeriv x k
  | e1 e2 -> (removeHOderivatives e1 dmap) (removeHOderivatives e2 dmap) 
  | _ -> expr
}

//Generate equations of form  der x = dx, which removes the need for
//higher-order derivatives.
def generateEquations(eqs:Equations, dlist:DerivList) -> Equations = {
    match dlist with
    | (x,dx)::xs -> der(x) = dx; generateEquations(eqs,xs)
    | _::xs -> generateEquations(eqs,xs) 
    | [] -> eqs
}

//Elaborate derivatives. Symbolic differentiation of expressions and
//conversion from higher-order derivatives into derivatives of first order.
//This is the main function for elaboration of derivatives.
//Returns the new equation system together with the mapping of derivatives
//That was generated.
def elaborateDerivatives(model:Equations, olddmap:DerivMap) -> (Equations,DerivMap) = {
    def (eqs,dmap) = extractDerivatives(model, Map.empty, olddmap);
    def eqs2 = differentiateModel(eqs);
    def eqs3 = removeHOderivatives(eqs2,dmap);
    (generateEquations eqs3 (Map.toList dmap),dmap);
}














