/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include BasicEqsFormulation
include DILL

def Clock(t_0: Real, t: <Real>) = {
  init t t_0 ++
  init (der t) (1.) ++
  eqs_and_edges (der t = 1.)
}

type Label = (<Real>, String)

def mkHModel(res: [Real], ivs: [InitVal]) -> HModel = {
  def f(a: Equations, r: <Real>) -> Equations = {
    a; r = 0.
  };

  def ff(a: HModel, iv: InitVal) -> HModel = {
    def (v, r) = iv;
    a ++ init v r
  };

  def eqs = foldLeft f (hd res) res;
  foldLeft ff (eqs_and_edges eqs) ivs
}

def simulate(m: HModel, I: Interval, h: Real, lbls: [Label]) -> () = {
  simulate m I h lbls 2.9 0.001 false false
}
