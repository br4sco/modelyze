/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Graphelaboration

type Frame = Node

type Torque = <Real>
type AngularDispl = <Real>
def RotBranch: Torque -> AngularDispl -> Frame -> Frame -> Equations

type Force = (<Real>, <Real>)
type TransDispl = (<Real>, <Real>)
def TransBranch: Force -> TransDispl -> Frame -> Frame -> Equations

def g = 9.81

def get_trans_graph(m: Equations) -> Set(Equations) = {
  def work (m: Equations, acc: Set(Equations)) -> Set(Equations) = {
    match m with
      | m_1; m_2 -> work m_2 (work m_1 acc)
      | TransBranch _ _ _ _ -> Set.add m acc
      | _ -> acc
  };
  work m (Set.empty)
}

def get_rot_graph(m: Equations) -> Set(Equations) = {
  def work (m: Equations, acc: Set(Equations)) -> Set(Equations) = {
    match m with
      | m_1; m_2 -> work m_2 (work m_1 acc)
      | RotBranch _ _ _ _ -> Set.add m acc
      | _ -> acc
  };
  work m (Set.empty)
}

def get_terminals(m: Equations) -> Set(Equations) = {
  def work (m: Equations, acc: Set(Equations)) -> Set(Equations) = {
    match m with
      | m_1; m_2 -> work m_2 (work m_1 acc)
      | TransBranch _ _ _ _ -> acc
      | RotBranch _ _ _ _ -> acc
      | _ -> Set.add m acc
  };
  work m (Set.empty)
}

def x, y, Fx, Fy, theta, tau: <Real>
def inertial, bodyfixed: Frame
// def _ = dprint(elaboratetopology (get_trans_graph (RigidBody 1. 1. (x, y) (Fx, Fy) theta tau (0., 0.) 0. inertial bodyfixed)))
