/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include EquationsFormulation

def PLANAR_TRANS = "Planar Translation"
def PLANAR_ROT = "Planar Rotation"

def g = 9.81

type Frame = (Vector, (Vector, Vector))
type Terminal = Frame -> (Vector => Vector)

def mkFrame(t: ()) -> Frame = { def i, j, k: Vector; (i, (j, k)) }
def iof(f: Frame) -> Vector = { fst f }
def jof(f: Frame) -> Vector = { fst (snd f) }
def kof(f: Frame) -> Vector = { snd (snd f) }

def mkAVar(v: Vector) -> [Vector] = { [v, (der v), (der (der v))] }
def mkTVar(v: Vector) -> [Vector] = { [v] }

def mkEdge(F_1: Frame, F_2: Frame, tv: Vector, av: Vector) -> VectorEdge = {
  (F_1, F_2, mkTVar tv, mkAVar av)
}

def planarBody(m: Real, I : Real, F_1: Frame, F_2: Frame) -> Component = {
  def F, r, T, o: Vector;
  listToMap
  [
    (PLANAR_TRANS,
      (
        [mkEdge F_1 F_2 F r],
        listToMap
        [
          (F, m * r'')
        ],
        (Map.empty)
      )
    ),
    (PLANAR_ROT,
      (
        [mkEdge F_1 F_2 T o],
        listToMap
        [
          (T, I * o'')
        ],
        (Map.empty)
      )
    )
  ]
}

def planarGravity(m: Real, F_1: Frame, F_2: Frame) -> Component = {
  def F, r, T, o: Vector;
  listToMap
  [
    (PLANAR_TRANS,
      (
        [mkEdge F_1 F_2 F r],
        listToMap
        [
          (F, m * g * (jof F_1))
        ],
        (Map.empty)
      )
    ),
    (PLANAR_ROT,
      (
        [mkEdge F_1 F_2 T o],
        listToMap
        [
          (T, zero)
        ],
        (Map.empty)
      )
    )
  ]
}

