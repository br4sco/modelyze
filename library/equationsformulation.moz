/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Vector

type Node = Dyn
type Edge = (Node, Node)

def IN_EDGE = -1.
def OUT_EDGE = 1.
def NO_EDGE = 0.

def mkIncidenceMatrix(G: [Edge]) -> MatrixMapReal = {
  def f(a: (Int, (Node => Int)), e: Edge) -> (Int, (Node => Int)) = {
    def ff(a: (Int, Node => Int), n: Node) -> (Int, (Node => Int)) = {
      def (c, m) = a;
      if Map.mem n m then a else (c + 1, Map.add n (c + 1) m)
    };
    ff (ff a (fst e)) (snd e)
  };

  def (m, nem) = foldLeft f (0, Map.empty) G;
  def n = length G;

  def ff(a: (Int, MatrixMapReal), e: Edge) -> (Int, MatrixMapReal) = {
    def (j, M) = a;
    (j + 1, add (Map.find (fst e) nem, j) OUT_EDGE (add (Map.find (snd e) nem, j) IN_EDGE M))
  };
  def (_, M) = foldLeft ff (1, mmRealZero (m, n)) G;
  M
}

def mkCutsetMatrix(IM: MatrixMapReal, vs: [MatrixMap]) -> (MatrixMapReal, [MatrixMap]) = {
  (IM, vs)
}
