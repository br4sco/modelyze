/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Equation
include Graph
include Vector

type Terminal = (Vector, Vector)
type BranchChordTrans = (Vector, Vector)
type SubsMap = (Vector => Vector)
type Vector2AccThrSpaceMap = (Vector => [Vector])
type ConstrVar = (Vector, [Vector])
type OrthoFormul = ([Vector], Vector)
type OrthoFormulMatrix = (MatrixMapSReal, MatrixMapSReal)
type BaseVectorMatrixPair = (Vector, MatrixMapSReal)
type BaseVector2MatrixMap = (Vector => MatrixMapSReal)
type BaseVector2BaseMap = (Vector => Base)
type NodeBasePair = (Node, [BaseVectorMatrixPair])
type ModelEdge = ((NodeBasePair, NodeBasePair), [Terminal], [ConstrVar], [ConstrVar])
type Domain = [ModelEdge]
type XY = (MatrixMapVector, MatrixMapVector)
type TopolInfo = (MatrixMapReal, XY)
type IncidenceMatrix = MatrixMapReal

def mkCutsetMatrix(IM: IncidenceMatrix, XY: XY)
  -> TopolInfo = {

  def (X, Y) = XY;
  if rdim X == cdim IM && rdim Y == cdim IM then {
    def work(i: Int, a: (MatrixMapInt, MatrixMap, MatrixMap))
      -> (MatrixMapInt, MatrixMap, MatrixMap) = {

      def (M, X, Y) = a;
      if i > rdim M then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim M) M));
        if i == j_max then work (i + 1) a
        else {
          work (i + 1) (swcols i j_max M,
                        swrows i j_max X,
                        swrows i j_max Y)
        }
      }
    };

    def IMrrt = trimzerorows (rowreduce IM);
    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def (IA, nX, nY) = work 1 (real2int IMrrt, X, Y);
      def (I, A) = vsplit (rdim IA) IA;
      (int2real A, (nX, nY))
    }
  } else error "Dimensions of variable matrices and incidence matrix does not agree"
}

def substitute(ter: SubsMap, tran: SubsMap, xys: [XY])
  -> [XY] = {

  def subs(xy: XY) -> XY = {

    def work(tv: [Vector], av: [Vector])
      -> ([Vector], [Vector]) = {

      // def _ = dprint("=== SUBS using TERMINALS ===");

      def tv = map (fun t: Vector -> subs t ter) tv;
      def av = map (fun a: Vector -> subs a ter) av;

      // def _ = dprint("y = ");
      // def _ = dprint(tv);
      // def _ = dprint("x = ");
      // def _ = dprint(av);

      // def _ = dprint("=== SUBS using TRANS MAPS ===");

      def tv = map (fun t: Vector -> subs t tran) tv;
      def av = map (fun a: Vector -> subs a tran) av;

      // def _ = dprint("y = ");
      // def _ = dprint(tv);
      // def _ = dprint("x = ");
      // def _ = dprint(av);

      if(
          (exists (fun t: Vector -> canSub t ter) tv) ||
          (exists (fun a: Vector -> canSub a ter) av) ||
          (exists (fun t: Vector -> canSub t tran) tv) ||
          (exists (fun a: Vector -> canSub a tran) av)
        ) then work tv av
      else (tv, av)
    };

    def (x, y) = xy;
    if dim x != dim y || cdim x != 1 then error BAD_MATRIX
    else {
      def (xl, yl) = work (concat (matrixToList (tr x)))
                            (concat (matrixToList (tr y)));

      (tr (listToMatrix [xl] (tr x)), tr (listToMatrix [yl] (tr y)))
    }
  };
  map subs xys
}

def getTopolInfo(Ds: [Domain]) -> [TopolInfo] = {
  def getTopolInfo(D: Domain) -> TopolInfo = {

    def G = map (fun me: ModelEdge -> def ((n1, _), (n2, _)) = fst me; (n1, n2)) D;
    def IM = mkIncidenceMatrix G;
    def m = cdim IM;

    def Xl = map (fun cvs: [ConstrVar] -> map (fun cv: ConstrVar -> fst cv) cvs)
              (map (fun me: ModelEdge -> def (_, _, cvs, _) = me; cvs) D);

    def nx = length (hd Xl);
    def X = listToMatrix Xl (mmVectorZero (m, nx));

    def Yl = map (fun cvs: [ConstrVar] -> map (fun cv: ConstrVar -> fst cv) cvs)
              (map (fun me: ModelEdge -> def (_, _, _, cvs) = me; cvs) D);

    def ny = length (hd Yl);
    def Y = listToMatrix Yl (mmVectorZero (m, ny));

    mkCutsetMatrix IM (X, Y)
  };

  map (fun D: Domain -> getTopolInfo D) Ds
}

def mkBase2MatrixMap(Ds: [Domain]) -> BaseVector2MatrixMap = {
  listToMap (concat (concat (map
    (fun D: Domain ->
    (map (fun me: ModelEdge ->
          def ((_, vm1), (_, vm2)) = fst me; append vm1 vm2) D)) Ds)))
}

def mkBase2BaseMap(Ds: [Domain]) -> BaseVector2BaseMap = {
  listToMap (concat (concat (map
    (fun D: Domain ->
    (map (fun me: ModelEdge ->
          def ((_, vm1), (_, vm2)) = fst me;
          def b1 = fst (unzip vm1);
          def b2 = fst (unzip vm2);
          append (map (fun v: Vector -> (v, listToSet b1)) b1)
                 (map (fun v: Vector -> (v, listToSet b2)) b2)
               ) D)) Ds)))
}

def mkTerminalSubs(Ds: [Domain]) -> SubsMap = {
  listToMap (concat
              (concat (map (fun D: Domain ->
                (map (fun me: ModelEdge -> snd me) D)) Ds)))
}

def mkVector2AccThrSpaceMap(Ds: [Domain]) -> Vector2AccThrSpaceMap = {
  listToMap
    (concat (concat
     (map (fun D: Domain ->
           map (fun me: ModelEdge ->
                def (_, _, xcvs, ycvs) = me;
                append xcvs ycvs
               ) D
          ) Ds)))
}

def mkBranchChordTransMap(Ts: [TopolInfo]) -> SubsMap = {
  def mkBranchChordTransMap(T: TopolInfo) -> [BranchChordTrans] = {
    def (A, (X, Y)) = T;
    def j = rdim A;
    def (Y_b, Y_c) = hsplit j Y;
    def (X_b, X_c) = hsplit j X;
    def CT = zip (concat (matrixToList (tr Y_b)))
                 (concat (matrixToList (tr (-A * Y_c))));
    def BT = zip (concat (matrixToList (tr X_c)))
                 (concat (matrixToList (tr ((tr A) * X_b))));
    (append CT BT)
  };

  listToMap
    (concat (map (fun T: TopolInfo -> mkBranchChordTransMap T) Ts))
}

def mkCircCutRes(Ts: [TopolInfo]) -> [XY] = {
  def f(T: TopolInfo) -> XY = {
    def (A, (x, y)) = T;
    def circM = (vconcat (-(tr A)) (mmRealId (cdim A)));
    def cutM = (vconcat (mmRealId (rdim A)) A);
    (circM * x, cutM * y)
  };
  map f Ts
}

def getZerothDerivs(XYs: [XY]) -> [XY] = {
  map (fun XY: XY ->
        (fst (vsplit 1 (fst XY)), fst (vsplit 1 (snd XY)))) XYs
}

def getHighestDerivs(XYs: [XY]) -> [XY] = {
  map (fun XY: XY ->
        def (X, Y) = XY;
        def nX = cdim X;
        def nY = cdim Y;
        (if nX > 1 then snd (vsplit (nX - 1)  X) else X,
         if nY > 1 then snd (vsplit (nY - 1)  Y) else Y)) XYs
}

def getBranchChordVars(Ts: [TopolInfo]) -> [XY] = {  map (fun T: TopolInfo ->
       def (A, (x, y)) = T;
       def j = rdim A;
       def (y_b, y_c) = hsplit j y;
       def (x_b, x_c) = hsplit j x;
       (x_b, y_c)
  ) Ts
}

def mkOrthoCoeffs(xbycs: [XY], cceqs: [XY])
  -> [XY] = {

  map (fun e: (XY, XY) ->
       def ((x_b, y_c), (circeqs, cuteqs)) = e;
       (hconcat x_b y_c, hconcat cuteqs circeqs)
  ) (zip xbycs cceqs)
}

def mkOrthoFormul(sm: Vector2AccThrSpaceMap, vps: [XY]) -> [OrthoFormul]  = {
  concat
  (map (fun vp: XY ->
        zip (map (fun v: Vector ->
                  Map.find v sm) (concat (matrixToList (tr (fst vp)))))
            (concat (matrixToList (tr (snd vp))))
      ) vps)
}

def filterOutNullSpace(pfs: [OrthoFormul]) -> [OrthoFormul] = {
  filter (fun pf: OrthoFormul -> !(isEmpty (fst pf))) pfs
}

def mkOrthoFormulMatrix(b2mm: BaseVector2MatrixMap, vbm: BaseVector2BaseMap, pfs: [OrthoFormul])
  -> [OrthoFormulMatrix] = {
  def f(pf: OrthoFormul) -> OrthoFormulMatrix = {
    def (bl, v) = pf;
    def base = (Map.find (hd bl) vbm);
    def ff(v: Vector) -> MatrixMapSReal = {
      if (Set.mem v base) && (Map.mem v b2mm) then Map.find v b2mm
      else error "Expression expressed in different bases"
    };

    (vconcat (map (fun v: Vector -> vectorToMatrix ff v) bl), vectorToMatrix ff v)
  };
  map f pfs
}

def mkDynamicRes(dxYs: [OrthoFormulMatrix]) -> [<Real>] = {
  concat (map (fun dxY: OrthoFormulMatrix ->
       concat (matrixToList ((tr (fst dxY)) * (snd dxY)))
      ) dxYs)
}

def formulateEqs(Ds: [Domain]) = {
  def ters = mkTerminalSubs Ds;
  def Ts = getTopolInfo Ds;
  def (As, XYs) = unzip Ts;
  // def _ = dprint("=== TopolInfo ===");
  // def _ = map dp As;
  // def _ = map dp (fst (unzip XYs));
  // def _ = map dp (snd (unzip XYs));

  def trans = mkBranchChordTransMap Ts;
  def xys = getZerothDerivs XYs;
  def xys_star = substitute ters trans xys;
  def cceqs = mkCircCutRes (zip As xys_star);

  // def _ = dprint("=== X* and Y* ===");
  // def _ = map dp (fst (unzip xys_star));
  // def _ = map dp (snd (unzip xys_star));

  // def _ = dprint("=== Circ and Cut Eqs ===");
  // def _ = map dp (fst (unzip cceqs));
  // def _ = map dp (snd (unzip cceqs));

  def h_xys = getHighestDerivs XYs;
  def xbycs = getBranchChordVars (zip As h_xys);

  // def _ = dprint("=== x_b and y_c ===");
  // def _ = map dp (fst (unzip xbycs));
  // def _ = map dp (snd (unzip xbycs));

  def vps = mkOrthoCoeffs xbycs cceqs;

  def _ = dprint("=== VP Rels ===");
  def _ = map dp (fst (unzip vps));
  def _ = map dp (snd (unzip vps));

  def sm = mkVector2AccThrSpaceMap Ds;
  def pfs = mkOrthoFormul sm vps;

  // def _ = dprint("=== Projs ===");
  def nnpfs = filterOutNullSpace pfs;
  def b2mm = mkBase2MatrixMap Ds;
  def vbm = mkBase2BaseMap Ds;
  def pms = mkOrthoFormulMatrix b2mm vbm nnpfs;
  // def _ = map dp (fst (unzip pms));
  // def _ = map dp (snd (unzip pms));
  def deqs = mkDynamicRes pms;
  def _ = dprint(deqs);
  ()
}
