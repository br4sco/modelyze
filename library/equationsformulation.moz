/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Equation
include Vector

type Node = Dyn
type Edge = (Node, Node)
type Terminal = (Vector, Vector)
type ConstrVar = (Vector, [Vector])
type ModelEdge = (Edge, [Terminal], [ConstrVar], [ConstrVar])
type Domain = [ModelEdge]

def IN_EDGE = -1.
def OUT_EDGE = 1.
def NO_EDGE = 0.

def mkIncidenceMatrix(G: [Edge]) -> MatrixMapReal = {
  def f(a: (Int, (Node => Int)), e: Edge) -> (Int, (Node => Int)) = {
    def ff(a: (Int, Node => Int), n: Node) -> (Int, (Node => Int)) = {
      def (c, m) = a;
      if Map.mem n m then a else (c + 1, Map.add n (c + 1) m)
    };
    ff (ff a (fst e)) (snd e)
  };

  def (m, nem) = foldLeft f (0, Map.empty) G;
  def n = length G;

  def ff(a: (Int, MatrixMapReal), e: Edge) -> (Int, MatrixMapReal) = {
    def (j, M) = a;
    (j + 1, add (Map.find (fst e) nem, j) OUT_EDGE (add (Map.find (snd e) nem, j) IN_EDGE M))
  };
  def (_, M) = foldLeft ff (1, mmRealZero (m, n)) G;
  M
}
def mkCutsetMatrix(IM: MatrixMapReal, X: [MatrixMap], Y: [MatrixMap])
  -> (MatrixMapReal, [MatrixMap], [MatrixMap]) = {

  if ((forAll (fun x: MatrixMap -> rdim x == cdim IM) X) &&
     (forAll (fun y: MatrixMap -> rdim y == cdim IM) Y))
  then {
    def work(i: Int, a: (MatrixMapInt, [MatrixMap], [MatrixMap]))
      -> (MatrixMapInt, [MatrixMap], [MatrixMap]) = {

      def (M, X, Y) = a;
      if i > rdim M then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim M) M));
        if i == j_max then work (i + 1) a
        else {
          work (i + 1) (swcols i j_max M,
                        map (fun x: MatrixMap -> swrows i j_max x) X,
                        map (fun y: MatrixMap -> swrows i j_max y) Y)
        }
      }
    };

    def IMrrt = trimzerorows (rowreduce IM);
    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def (IA, nX, nY) = work 1 (real2int IMrrt, X, Y);
      def (I, A) = vsplit (rdim IA) IA;
      (int2real A, nX, nY)
    }
  } else error "Dimensions of variable matrices and incidence matrix does not agree"
}

def mkPrimaryVarsMap(mfind: MatrixFind, svs: Matrix, pvs: Matrix)
  -> (Dyn => Dyn) = {

  if dim svs != dim pvs || cdim svs != 1 then error BAD_MATRIX
  else listToMap (zip (matrixToList mfind svs) (matrixToList mfind pvs))
}
// def mkPrimaryVarsMap(svs: MatrixMapSReal, pvs: MatrixMapSReal)
//   -> (<Real> => <Real>) = {

//   mkPrimaryVarsMap mmSRealFind svs pvs
// }
def mkPrimaryVarsMap(svs: MatrixMapVector, pvs: MatrixMapVector)
  -> (Vector => Vector) = {

  mkPrimaryVarsMap mmVectorFind svs pvs
}

def substitute(mfind: MatrixFind, madd: MatrixAdd,
  x: Matrix, y: Matrix, ter: (Dyn => Dyn), tran: (Dyn => Dyn))
  -> (Matrix, Matrix) = {

  def work(tv: [Dyn], av: [Dyn], ter: (Dyn => Dyn),
    tran: (Dyn => Dyn)) -> ([Dyn], [Dyn]) = {

    def _ = dprint("=== SUBS using TERMINALS ===");

    def tv = map (fun t: Dyn -> subs t ter) tv;
    def av = map (fun a: Dyn -> subs a ter) av;


    def _ = dprint("y = ");
    def _ = dprint(tv);
    def _ = dprint("x = ");
    def _ = dprint(av);

    def _ = dprint("=== SUBS using TRANS MAPS ===");
    def tv = map (fun t: Dyn -> subs t tran) tv;
    def av = map (fun a: Dyn -> subs a tran) av;

    def _ = dprint("y = ");
    def _ = dprint(tv);
    def _ = dprint("x = ");
    def _ = dprint(av);

    if(
        (exists (fun t: Dyn -> canSub t ter) tv) ||
        (exists (fun a: Dyn -> canSub a ter) av) ||
        (exists (fun t: Dyn -> canSub t tran) tv) ||
        (exists (fun a: Dyn -> canSub a tran) av)
      ) then work tv av ter tran
    else (tv, av)
  };

  if dim x != dim y || cdim x != 1 then error BAD_MATRIX
  else {
    def (xl, yl) = work (matrixToList mfind x) (matrixToList mfind y) ter tran;
    (listToMatrix madd xl x, listToMatrix madd yl y)
  }
}
def substitute(x: MatrixMapVector, y: MatrixMapVector, ter: (Vector => Vector),
  tran: (Vector => Vector)) -> (MatrixMapVector, MatrixMapVector) = {

  substitute mmVectorFind mmVectorAdd x y ter tran
}
// def substitute(x: MatrixMapSReal, y: MatrixMapSReal, ter: (<Real> => <Real>),
//   tran: (<Real> => <Real>)) -> (MatrixMapSReal, MatrixMapSReal) = {

//   substitute mmSRealFind mmSRealAdd x y ter tran
// }

// def getTopolInfo(D: Domain)
//   -> (MatrixMapReal, [MatrixMapVector], [MatrixMapVector]) = {

//   def G = map (fun me: ModelEdge -> fst me) D;
//   def m = length G;
//   def
// }
