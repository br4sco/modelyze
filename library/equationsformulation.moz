/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Equation
include Vector

type Node = Dyn
type Edge = (Node, Node)
type Subs = (Vector, Vector)
type SubsMap = (Vector => Vector)
type ConstrVar = (Vector, [Vector])
type ModelEdge = (Edge, [Subs], [ConstrVar], [ConstrVar])
type Domain = [ModelEdge]
type XYMatrices = (MatrixMapVector, MatrixMapVector)
type TopolInfo = (MatrixMapReal, XYMatrices)

def IN_EDGE = -1.
def OUT_EDGE = 1.
def NO_EDGE = 0.

def mkIncidenceMatrix(G: [Edge]) -> MatrixMapReal = {
  def f(a: (Int, (Node => Int)), e: Edge) -> (Int, (Node => Int)) = {
    def ff(a: (Int, Node => Int), n: Node) -> (Int, (Node => Int)) = {
      def (c, m) = a;
      if Map.mem n m then a else (c + 1, Map.add n (c + 1) m)
    };
    ff (ff a (fst e)) (snd e)
  };

  def (m, nem) = foldLeft f (0, Map.empty) G;
  def n = length G;

  def ff(a: (Int, MatrixMapReal), e: Edge) -> (Int, MatrixMapReal) = {
    def (j, M) = a;
    (j + 1, add (Map.find (fst e) nem, j) OUT_EDGE (add (Map.find (snd e) nem, j) IN_EDGE M))
  };
  def (_, M) = foldLeft ff (1, mmRealZero (m, n)) G;
  M
}

def mkCutsetMatrix(IM: MatrixMapReal, XY: XYMatrices)
  -> TopolInfo = {

  def (X, Y) = XY;
  if rdim X == cdim IM && rdim Y == cdim IM then {
    def work(i: Int, a: (MatrixMapInt, MatrixMap, MatrixMap))
      -> (MatrixMapInt, MatrixMap, MatrixMap) = {

      def (M, X, Y) = a;
      if i > rdim M then a
      else {
        def j_max = snd (argfind (fun v: Int -> v != 0)
                      (sub (i, 1) (i, cdim M) M));
        if i == j_max then work (i + 1) a
        else {
          work (i + 1) (swcols i j_max M,
                        swrows i j_max X,
                        swrows i j_max Y)
        }
      }
    };

    def IMrrt = trimzerorows (rowreduce IM);
    if rdim IMrrt > cdim IMrrt then error BAD_MATRIX
    else {
      def (IA, nX, nY) = work 1 (real2int IMrrt, X, Y);
      def (I, A) = vsplit (rdim IA) IA;
      (int2real A, (nX, nY))
    }
  } else error "Dimensions of variable matrices and incidence matrix does not agree"
}

def substitute(ter: SubsMap, tran: SubsMap, xys: [XYMatrices])
  -> [XYMatrices] = {

  def subs(xy: XYMatrices) -> XYMatrices = {

    def work(tv: [Vector], av: [Vector])
      -> ([Vector], [Vector]) = {

      // def _ = dprint("=== SUBS using TERMINALS ===");

      def tv = map (fun t: Vector -> subs t ter) tv;
      def av = map (fun a: Vector -> subs a ter) av;


      // def _ = dprint("y = ");
      // def _ = dprint(tv);
      // def _ = dprint("x = ");
      // def _ = dprint(av);

      // def _ = dprint("=== SUBS using TRANS MAPS ===");

      def tv = map (fun t: Vector -> subs t tran) tv;
      def av = map (fun a: Vector -> subs a tran) av;

      // def _ = dprint("y = ");
      // def _ = dprint(tv);
      // def _ = dprint("x = ");
      // def _ = dprint(av);

      if(
          (exists (fun t: Vector -> canSub t ter) tv) ||
          (exists (fun a: Vector -> canSub a ter) av) ||
          (exists (fun t: Vector -> canSub t tran) tv) ||
          (exists (fun a: Vector -> canSub a tran) av)
        ) then work tv av
      else (tv, av)
    };

    def (x, y) = xy;
    if dim x != dim y || cdim x != 1 then error BAD_MATRIX
    else {
      def (xl, yl) = work (concat (matrixToList (tr x)))
                            (concat (matrixToList (tr y)));

      (tr (listToMatrix [xl] (tr x)), tr (listToMatrix [yl] (tr y)))
    }
  };
  map subs xys
}

def getTopolInfo(Ds: [Domain]) -> [TopolInfo] = {
  def getTopolInfo(D: Domain) -> TopolInfo = {

    def G = map (fun me: ModelEdge -> fst me) D;
    def IM = mkIncidenceMatrix G;
    def m = cdim IM;

    def Xl = map (fun cvs: [ConstrVar] -> map (fun cv: ConstrVar -> fst cv) cvs)
              (map (fun me: ModelEdge -> def (_, _, cvs, _) = me; cvs) D);

    def nx = length (hd Xl);
    def X = listToMatrix Xl (mmVectorZero (m, nx));

    def Yl = map (fun cvs: [ConstrVar] -> map (fun cv: ConstrVar -> fst cv) cvs)
              (map (fun me: ModelEdge -> def (_, _, _, cvs) = me; cvs) D);

    def ny = length (hd Yl);
    def Y = listToMatrix Yl (mmVectorZero (m, ny));

    mkCutsetMatrix IM (X, Y)
  };

  map (fun D: Domain -> getTopolInfo D) Ds
}

def getTerminals(Ds: [Domain]) -> SubsMap = {
  listToMap (concat
              (concat (map (fun D: Domain ->
                (map (fun me: ModelEdge -> snd me) D)) Ds)))
}

def getBranchChordTranss(Ts: [TopolInfo]) -> SubsMap = {
  def getBranchChordTranss(T: TopolInfo) -> [Subs] = {
    def (A, (X, Y)) = T;
    def j = rdim A;
    def (Y_b, Y_c) = hsplit j Y;
    def (X_b, X_c) = hsplit j X;
    def CT = zip (concat (matrixToList (tr Y_b)))
                  (concat (matrixToList (tr (-A * Y_c))));
    def BT = zip (concat (matrixToList (tr X_c)))
                  (concat (matrixToList (tr ((tr A) * X_b))));
    (append CT BT)
  };

  listToMap
    (concat (map (fun T: TopolInfo -> getBranchChordTranss T) Ts))
}

def getCircCutEqs(Ts: [TopolInfo]) -> [XYMatrices] = {
  def f(T: TopolInfo) -> XYMatrices = {
    def (A, (x, y)) = T;
    def circM = (vconcat (-(tr A)) (mmRealId (cdim A)));
    def cutM = (vconcat (mmRealId (rdim A)) A);
    (circM * x, cutM * y)
  };
  map f Ts
}

def getZerothDerivs(XYs: [XYMatrices]) -> [XYMatrices] = {
  map (fun XY: XYMatrices ->
        (fst (vsplit 1 (fst XY)), fst (vsplit 1 (snd XY)))) XYs
}

def getHighestDerivs(XYs: [XYMatrices]) -> [XYMatrices] = {
  map (fun XY: XYMatrices ->
         def (X, Y) = XY;
         def nX = cdim X;
         def nY = cdim Y;
        (if nX > 1 then snd (vsplit (nX - 1)  X) else X,
         if nY > 1 then snd (vsplit (nY - 1)  Y) else Y)) XYs
}

def formulateEqs(Ds: [Domain]) = {
  def ters = getTerminals Ds;
  def Ts = getTopolInfo Ds;
  def trans = getBranchChordTranss Ts;
  def (As, XYs) = unzip Ts;

  // def _ = dprint("=== TopolInfo ===");
  // def _ = map dp As;
  // def _ = map dp (fst (unzip XYs));
  // def _ = map dp (snd (unzip XYs));

  def xys = getZerothDerivs XYs;
  def xys_star = substitute ters trans xys;
  def cceqs = getCircCutEqs (zip As xys_star);

  // def _ = dprint("=== Circ and Cut Eqs ===");
  // def _ = map dp (fst (unzip cceqs));
  // def _ = map dp (snd (unzip cceqs));

  def h_xys = getHighestDerivs XYs;
  def _ = map dp (fst (unzip h_xys));
  def _ = map dp (snd (unzip h_xys));
  ()
}
