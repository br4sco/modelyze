/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include GRAPH
include MATRIX

type Frame = Node
type SRMatrix = MatrixMapSReal
type Frames2TransMatrixFun = Frame -> Frame -> SRMatrix

type Vector
def vec: [<Real>] -> Frame -> Vector

// def frame(v: Vector) -> Frame = {
//   match v with
//   | vec _ f -> f
//   | _ -> error "Unmatched"
// }

// def elements(v: Vector) -> [<Real>] = {
//   match v with
//   | vec (sval es: [<Real>]) _ -> es
//   | _ -> error "Unmatched"
// }

def dp(ve: Vector) -> Vector = {
  def work(ve: Vector) -> () = {
    match ve with
    | vec (sval es: [<Real>]) f -> {
        def _ = print "(";
        def _ = dprint(es);
        def _ = print " in frame: ";
        def _ = dprint(f);
        def _ = print ")";
        ()
      }
    | vAdd v1 v2 -> {
        def _ = (work v1);
        def _ = print " + ";
        work v2
      }
    | _ -> error "Unmatched"
  };

  def _ = work ve;
  ve
}

def dpln(ve: Vector) -> Vector = {
  def _ = dp ve;
  def _ = print "\n";
  ve
}

def vAdd: Vector -> Vector -> Vector
def (+) = vAdd

def evaluate(tmf: Frames2TransMatrixFun, f: Frame, ve: Vector) -> SRMatrix = {
  def work(ve: Vector) -> SRMatrix = {
    match ve with
    | sym: Vector -> { def _ = dprintln ve; error "Has no base choice" }
    | vec (sval es: [<Real>]) vf -> {
        def vm = tr (listToMatrix [es] (mmSRealZero (1, length es)));
        if seq vf f then vm else (tmf vf f) * vm
      }
    | vAdd v1 v2 -> (work v1) + (work v2)
    | _ -> { def _ = dprintln ve; error "Unmatched" }
  };
  work ve
}
