/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include MbmlangExports
include MbmlangCore

def MODEL_FILENAME = "/tmp/model.mo"
def SCENE_FILENAME = "/tmp/scene.json"

type Color = String

type Material
def stdMaterial: Color -> Real -> Material

type Geometry2D
def rectangle: Real -> Real -> Geometry2D
def circle: Real -> Geometry2D

type VisualData
def visualSolid: Geometry2D -> Material -> VisualData
def visualAxes: Real -> VisualData

type ModelElement
def (++) : ModelElement -> ModelElement -> ModelElement
def visualElement: Vector2 -> <Real> -> VisualData -> ModelElement
def equationsElement: Equations -> ModelElement
def NoElement: ModelElement

type ModelFun1 = Frame -> ModelElement
type ModelFun2 = Frame -> Frame -> ModelElement

def inParalell(l: ModelFun2, r: ModelFun2, f_1: Frame, f_2: Frame) -> ModelElement = {
  l f_1 f_2 ++ r f_1 f_2
}
def (||) = inParalell

def inSeries(l: Frame, r: ModelFun1) -> ModelElement = {
  r l
}
def (--) = inSeries

def inSeries(l: ModelFun1, r: Frame) -> ModelElement = {
  l r
}
def (--) = inSeries

def inSeries(f: Frame, r: ModelFun2) -> ModelFun1 = {
  r f
}
def (--) = inSeries

def inSeries(l: ModelFun1, r: ModelFun2) = {
  def f_1: Frame;
  fun f_2: Frame -> l f_1 ++ r f_1 f_2
}
def (--) = inSeries

def inSeriesExposeFrame(l: ModelFun2, f_2: Frame) = {
  (l, f_2)
}
def (-.-) = inSeriesExposeFrame

def inSeriesExposeFrame(lf_2: (ModelFun2, Frame), r: ModelFun2) = {
  def (l, f_2) = lf_2;
  fun f_1: Frame -> fun f_3: Frame -> l f_1 f_2 ++ r f_2 f_3
}
def (-.-) = inSeriesExposeFrame

def inSeries(l: ModelFun2, r: ModelFun2) = {
  def f_2: Frame;
  fun f_1: Frame -> fun f_3: Frame -> l f_1 f_2 ++ r f_2 f_3
}
def (--) = inSeries

def WHITE = "#ffffff"
def RED = "#ff0000"
def BLUE = "#0000ff"
def GREEN = "#00ff00"
def BLACK = "#000000"

def real2JSONstring(r: Real) -> String = {
  if int2real (real2int r) == r then real2string r ++ "0"
  else real2string r
}

def geometry2JSON(g: Geometry2D) -> String = {
  match g with
  | rectangle (sval h: Real) (sval w: Real) -> "{ " ++
                                    "\"type\": \"Rectangle\", " ++
                                    "\"height\": " ++ real2JSONstring h ++ ", " ++
                                    "\"width\": " ++ real2JSONstring w ++
                                    " }"

  | circle (sval r: Real) -> "{ " ++
                             "\"type\": \"Circle\", " ++
                             "\"radius\": " ++ real2JSONstring r ++
                             " }"
  | _ -> error "Unmatched Geometry2D"
}

// def frameToJSON(rr: Vector2, th: <Real>, u: Real) -> String = {
//   "{ \"type\": Frame, \"units\": "   "}"
// }

def material2JSON(m: Material) -> String = {
  match m with
  | stdMaterial (sval s: String) (sval o: Real) -> {
      if o >= 0. && o <= 1. then {
        "{ " ++
        "\"type\": \"Standard\", " ++
        "\"color\": \"" ++ s ++ "\", " ++
        "\"opacity\": " ++ real2JSONstring o ++
        " }"
      } else error INVALID_ARGUMENT
    }
  | _ -> error "Unmatched Material"
}

def visualData2Json(d: VisualData) -> String = {
  match d with
  | visualSolid g m -> "{ \"type\": \"Solid\"," ++
                       "\"geometry\": " ++ geometry2JSON g ++ ", " ++
                       "\"material\": " ++ material2JSON m ++
                       " }"
  | visualAxes (sval s: Real) -> "{ \"type\": \"Axes\", " ++
                                 "\"size\": " ++ real2JSONstring s ++
                                 " }"
  | _ -> error "Unmatched visual data"
}

def visualElement2Json(o: ModelElement) -> String = {
  def work(o: ModelElement) -> String = {
    match o with
    | o_1 ++ o_2 -> work o_1 ++ ", " ++ work o_2
    | visualElement (vec x y) th vo -> {
                                      "{ " ++
                                      "\"x\": \"" ++ symstr(x) ++ "\", " ++
                                      "\"y\": \"" ++ symstr(y) ++ "\", " ++
                                      "\"th\": \"" ++ symstr(th) ++ "\", " ++
                                      "\"data\": " ++ visualData2Json vo ++
                                      " }"}
    | _ -> error "Expected only visualElement"
  };
  "{ \"scene\": [ " ++ work o ++ " ] }"
}

def getVisualElements(o: ModelElement) -> ModelElement = {
  def work(o: ModelElement, a: ModelElement) -> ModelElement = {
    match o with
    | o_1 ++ o_2 -> work o_2 (work o_1 a)
    | visualElement _ _ _ -> a ++ o
    | _ -> a
  };
  work o NoElement
}

def cleanupModelElements(o: ModelElement) -> ModelElement = {
    match o with
    | o_1 ++ o_2 ->
       {
          match (cleanupModelElements o_1, cleanupModelElements o_2) with
          | (NoElement, NoElement) -> NoElement
          | (NoElement, o) -> o
          | (o, NoElement) -> o
          | (o_1b,o_2b) -> o_1b ++ o_2b
       }
    | _ -> o
}

def getModel(o: ModelElement) -> Equations = {
  def work(o: ModelElement, a: Equations) -> Equations = {
    match o with
    | o_1 ++ o_2 -> (work o_2 (work o_1 a))
    | equationsElement e -> a; e
    | _ -> a
  };
  work o NoEqn
}

def elaborateToFile(o: ModelElement) -> () = {
  def m = getModel o;
  def vo = getVisualElements o;
  def vo = cleanupModelElements vo;
  def _ = writeFile MODEL_FILENAME (exportDill2Modelica "Model" m ++ "\n");
  writeFile SCENE_FILENAME (visualElement2Json vo ++ "\n")
}

def Body1(m: Real, I: Real, DATUM: Frame, f: Frame) -> ModelElement = {
  equationsElement (Body m I DATUM f)
}

def Gravity1(m: Real, DATUM: Frame, f: Frame) -> ModelElement = {
  equationsElement (Gravity m DATUM f)
}

def RigidArm1(l: Real, DATUM: Frame, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (RigidArm l DATUM f_1 f_2)
}

def RevoluteJoint1(f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (RevoluteJoint f_1 f_2)
}

def Translation1(x: Real, y: Real, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (Translation x y f_1 f_2)
}

def TranslationController1(rr: Vector2, ie: Equations, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (ie; AcrossController rr f_1 f_2)
}

def TranslationController1(rr: Vector2, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (AcrossController rr f_1 f_2)
}

def RotationController1(th: <Real>, ie: Equations, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (ie; AcrossController th f_1 f_2)
}

def Rotation1(th: Real, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (Translation 0. 0. f_1 f_2)
}

def RotationController1(th: <Real>, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (AcrossController th f_1 f_2)
}

def RotationalDamper1(D: Real, f_1: Frame, f_2: Frame) -> ModelElement = {
  equationsElement (RotationalDamper D f_1 f_2)
}

def VisSolid1(g: Geometry2D, c: Color, opacity: Real, DATUM: Frame, f: Frame) -> ModelElement = {
  def x, y, th: Real;
  def rr = vec x y;
  DATUM -- (TranslationController1(rr) || RotationController1(th)) -- f ++
  visualElement rr th (visualSolid g (stdMaterial c opacity))
}

def VisSolidNonRotating1(g: Geometry2D, c: Color, opacity: Real, DATUM: Frame, f: Frame) -> ModelElement = {
  def x, y, th: Real;
  def rr = vec x y;
  equationsElement (th = 0.) ++
  DATUM -- TranslationController1(rr) -- f ++
  visualElement rr th (visualSolid g (stdMaterial c opacity))
}

def Bar1(m: Real, h: Real, l: Real, DATUM: Frame, c: Frame, we: Frame, ea: Frame) -> ModelElement = {
  def I = h * l * (h^2. + l^2.) / 12.;
  DATUM -- (Body1 m I || Gravity1 m ) -- c ++
  we -- RigidArm1 (l / 2.) DATUM -.- c -.- RigidArm1 (l / 2.) DATUM -- ea
}
