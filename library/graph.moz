/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Matrix

type Edge = (Dyn, Dyn)
type AdjList = (Dyn => [Dyn])

def findPath(G: AdjList, s: Dyn, e: Dyn) -> [[Dyn]] = {

  def work(v: Set(Dyn), ps: [[Dyn]]) -> [[Dyn]] = {
    def eps = filter (fun p: [Dyn] -> seq (hd p) e) ps;
    if !(isEmpty eps) then eps
    else {
      def nvps = filter (fun p: [Dyn] -> !(Set.mem (hd p) v)) ps;
      concat (map (fun p: [Dyn] ->
                   def n = hd p;
                   def adj = (Map.find n G);
                   work (Set.add n v) (map (fun n: Dyn -> (n::p)) adj)
                  ) ps)
    }
  };
  map (fun p: [Dyn] -> reverse p) (work (Set.add s (Set.empty)) [[s]])
}

def pathToEdgePath(p: [Dyn]) -> [Edge] = {
  def f(a: [Edge], n: Dyn) -> [Edge] = {
    def (_, n_1) = hd a;
    (n_1, n)::a
  };

  match p with
  | [] -> []
  | _::[] -> []
  | n_1::(n_2::ns) -> reverse (foldLeft f [(n_1, n_2)] ns)
}

def edgeList2AdjList(G: [Edge]) -> AdjList = {
  def f(a: AdjList, e: Edge) -> AdjList = {
    def get(n: Dyn) -> [Dyn] = {
      if Map.mem n a then Map.find n a else []
    };
    def add(n1: Dyn, n2: Dyn, a: AdjList) -> AdjList = {
      Map.add n1 (n2::(get n1)) a
    };
    def (n1, n2) = e;
    add n2 n1 (add n1 n2 a)
  };
  foldLeft f (Map.empty) G
}

def hasSelfLoop(G: [Edge]) -> Bool = {
  exists (fun e: Edge -> seq (fst e) (snd e)) G
}

def IN_EDGE = -1.
def OUT_EDGE = 1.
def NO_EDGE = 0.

def mkIncidenceMatrix(G: [Edge]) -> MatrixMapReal = {
  def f(a: (Int, (Dyn => Int)), e: Edge) -> (Int, (Dyn => Int)) = {
    def ff(a: (Int, Dyn => Int), n: Dyn) -> (Int, (Dyn => Int)) = {
      def (c, m) = a;
      if Map.mem n m then a else (c + 1, Map.add n (c + 1) m)
    };
    ff (ff a (fst e)) (snd e)
  };

  def (m, nem) = foldLeft f (0, Map.empty) G;
  def n = length G;

  def ff(a: (Int, MatrixMapReal), e: Edge) -> (Int, MatrixMapReal) = {
    def (j, M) = a;
    (j + 1, add (Map.find (fst e) nem, j) OUT_EDGE (add (Map.find (snd e) nem, j) IN_EDGE M))
  };
  def (_, M) = foldLeft ff (1, mmRealZero (m, n)) G;
  M
}
