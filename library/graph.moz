/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Base

type Node
type Edge = (Node, Node)
type AdjList = (Node => [Node])

def findPath(G: AdjList, s: Node, e: Node) -> [[Node]] = {

  def work(v: Set(Node), ps: [[Node]]) -> [[Node]] = {
    def eps = filter (fun p: [Node] -> seq (hd p) e) ps;
    if !(isEmpty eps) then eps
    else {
      def nvps = filter (fun p: [Node] -> !(Set.mem (hd p) v)) ps;
      concat (map (fun p: [Node] ->
                   def n = hd p;
                   def adj = (Map.find n G);
                   work (Set.add n v) (map (fun n: Node -> (n::p)) adj)
                  ) ps)
    }
  };
  map (fun p: [Node] -> reverse p) (work (Set.add s (Set.empty)) [[s]])
}
