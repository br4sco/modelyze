/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include ModelyzeDAE
type VMap = (<Real> => Real)
type VMapElm = (<Real>, Real)
type Sigma = (Real, Set(Equations), VMap)
type SigmaT = (Real, Set(Equations), VMap, Set(?))


def is_equal(lhs: <Real>, rhs: <Real>) -> Bool = Set.mem rhs (Set.add lhs (Set.empty))

def is_equal(lhs: Set(?), rhs: Set(?)) -> Bool = {
  def subsetleft = for_all (Set.toList lhs) (fun e: ? -> (Set.mem e rhs));
  def subsetright = for_all (Set.toList rhs) (fun e: ? -> (Set.mem e lhs));
  subsetleft && subsetright
}

def cont_to_set(cont: ?) -> Set(?) = {
  def work(cont: ?, acc: Set(?)) -> Set(?) = {
    match cont with
    | this ; that -> work that (work this acc)
    | last -> (Set.add last acc)
  };
  work cont (Set.empty)
}

def set_to_cont(set: Set(?)) -> ? = {
   def work(l: [?], acc: ?) -> ? = {
      match l with
      | e::es -> work es (acc;e)
      | [] -> acc
   };
   def l = (Set.toList set);
   if (length l) == 0 then error "Empty set" else
   if (length l) == 1 then (hd l) else work (tl l) (hd l)
}

def E_vmap_to_ukmap_yy_yp(E: Set(Equations), vmap: VMap, undefval: Real) ->
  (UkMap, VarArray, VarArray) = {
  def (n, ukm) = realUnknowns (set_to_cont E);
  def yy = (Array.make n undefval);
  def yp = (Array.make n undefval);
  def work(gvlist: [VMapElm]) -> () = {
    def get_uk_and_arr(e: <Real>) -> (<Real>, VarArray) = {
      match e with
      | der x -> (x, yp)
      | x -> (x, yy)
      | _ -> error "expected variables and derivatives"
    };
    match gvlist with
    | e::es -> {
        def (ee, v) = e;
        def (x, a) = get_uk_and_arr ee;
        def (i, _) = (Map.find x ukm);
        def _ = (Array.set a i v);
        work es
      }
    | [] -> ()
  };
  def _ = work (Map.toList vmap);
  (ukm, yy, yp)
}

def ukmap_yy_yp_to_vmap(ukm: UkMap, yy: VarArray, yp: VarArray) -> VMap = {
  def f(acc: VMap,  e: (<Real>, (Int, Bool))) -> VMap = {
    def (x, (i, _)) = e;
    Map.add x (Array.get yy i) (Map.add (der x) (Array.get yp i) acc)
  };
  fold_left f (Map.empty) (Map.toList ukm)
}

def get_dae_find_ic_input(sigma: Sigma, undefval: Real) ->
  (Residual, VarArray, VarArray, VarArray, UkMap) = {
  def (t, E, vmap) = sigma;
  def (ukm, yy, yp) = E_vmap_to_ukmap_yy_yp E vmap undefval;
  def vids = initConditionCorrection ukm;
  def resf = makeResidual ukm (set_to_cont E);
  (resf, yy, yp, vids, ukm)
}
