/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/


def (mod) : Int -> Int -> Int = @@int_mod
def (+) : Int -> Int -> Int = @@int_add
def (-) : Int -> Int -> Int = @@int_sub
def (*) : Int -> Int -> Int = @@int_mul
def (/) : Int -> Int -> Int = @@int_div
def (<) : Int -> Int -> Bool = @@int_less
def (<=) : Int -> Int -> Bool = @@int_less_equal
def (>) : Int -> Int -> Bool = @@int_great
def (>=) : Int -> Int -> Bool = @@int_great_equal
def (==) : Int -> Int -> Bool = @@int_equal
def (!=) : Int -> Int -> Bool = @@int_not_equal
def (+) : Real -> Real -> Real = @@real_add
def (-) : Real -> Real -> Real = @@real_sub
def (*) : Real -> Real -> Real = @@real_mul
def (/) : Real -> Real -> Real = @@real_div
def (<) : Real -> Real -> Bool = @@real_less
def (<=) : Real -> Real -> Bool = @@real_less_equal
def (>) : Real -> Real -> Bool = @@real_great
def (>=) : Real -> Real -> Bool = @@real_great_equal
def (==) : Real -> Real -> Bool = @@real_equal
def (!=) : Real -> Real -> Bool = @@real_not_equal
def (!) : Bool -> Bool = @@bool_not
def (&&) : Bool -> Bool -> Bool = @@bool_and
def (||) : Bool -> Bool -> Bool = @@bool_or
def (--) : Int -> Int = @@int_neg
def (--) : Real -> Real = @@real_neg
def bool2string : Bool -> String = @@bool2string
def int2string : Int -> String = @@int2string
def real2string : Real -> String = @@real2string
def int2real : Int -> Real = @@int2real
def real2int : Real -> Int = @@real2int
def string2bool : String -> Bool = @@string2bool
def string2int : String -> Int = @@string2int
def string2real : String -> Real = @@string2real
def isBoolString : String -> Bool = @@isboolstring
def isRealString : String -> Bool = @@isrealstring
def isIntString : String -> Bool = @@isintstring
def sin : Real -> Real = @@sin
def cos : Real -> Real = @@cos
def tan : Real -> Real = @@tan
def asin : Real -> Real = @@asin
def acos : Real -> Real = @@acos
def atan : Real -> Real = @@atan
def sinh : Real -> Real = @@sinh
def cosh : Real -> Real = @@cosh
def tanh : Real -> Real = @@tanh
def ceil : Real -> Real = @@ceil
def floor : Real -> Real = @@floor
def log : Real -> Real = @@log
def log10 : Real -> Real = @@log10
def sqrt : Real -> Real = @@sqrt
def exp : Real -> Real = @@exp
def (^) : Real -> Real -> Real = @@exponentiation
def substr : String -> Int -> Int -> String = @@string_substr
def strlen : String -> Int = @@string_strlen
def (++) : String -> String -> String = @@string_concat

def INFINITE = 1./0.

type RealSignal = <Real>
type IntSignal = <Int>
type BoolSignal = <Bool>
type Dyn = ?


def abs(x:Real) -> Real = if x < 0. then x * -1.0 else x
def abs(x:Int) -> Int = if x < 0 then x * -1 else x

def sign(x:Real) -> Real = if x < 0.0 then -1.0 else 1.0 // /Viktor
def sign(x:Int) -> Int = if x < 0 then -1 else 1

def max(x:Real, y:Real) -> Real = if x >= y then x else y
def max(x:Int, y:Int) -> Int = if x >= y then x else y

def print : String -> () = @@print
def print(i:Int) -> () = print(int2string(i))
def print(i:Real) -> () = print(real2string(i))

def println(s:String) -> () = {
    def _ = print s;
    print "\n";
}
def println(i:Int) -> () = println(int2string(i))
def println(i:Real) -> () = println(real2string(i))


def reverse(lst:[Dyn]) -> [Dyn] = {
    def work(lst:[Dyn],acc:[Dyn]) -> [Dyn] = {
        match lst with
        | l::ls -> work(ls,l::acc)
        | [] -> acc
    };
    work(lst,[])
}

def append(l1:[Dyn], l2:[Dyn]) -> [Dyn] = {
    def work(lst:[Dyn]) -> [Dyn] = {
        match lst with
        | l::ls -> l::(work(ls))
        | [] -> l2
    };
    work(l1)
}

def length(l:[Dyn]) -> Int = {
    match l with
    | _::ls -> length(ls) + 1
    | [] -> 0
}

def nth(l:[Dyn], n:Int) -> Dyn = {
    def work(l:[Dyn], k:Int) -> Dyn = {
        match l with
        | e::ls -> if k == n then e else work(ls, k+1)
        | [] -> error "There is no nth element in the list."
    };
    work(l, 0)
}

def map(f: (Dyn -> Dyn), l: [Dyn]) -> [Dyn] = {
  def work(l: [Dyn], acc: [Dyn]) -> [Dyn] = {
    match l with
    | e::es -> work es ((f e)::acc)
    | [] -> acc
  };
  reverse (work l [])
}

def hd(l: [Dyn]) -> Dyn = {
  match l with
  | e::es -> e
  | _ -> error "There is no head of an empty list"
}

def tl(l: [Dyn]) -> [Dyn] = {
  match l with
  | e::es -> es
  | _ -> error "There is no tail of an empty list"
}

def iter(f: (Dyn -> ()), l: [Dyn]) -> () = {
  def work(l: [Dyn]) -> () = {
    match l with
    | e::es -> {
        def _ = f e;
        work es
      }
    | _ -> ()
  };
  work l
}

def list_to_array(l: [Dyn]) -> {Dyn} = {
  def work(l: [Dyn], a: {Dyn}, k: Int) -> () = {
    match l with
    | e::es -> {
        def _ = (Array.set a k e);
        work es a (k + 1)
      }
    | _ -> ()
  };

  def n = length l;
  def h = hd l;
  def a = (Array.make n l);
  def _ = work l a 0;
  a
}

def list_to_set(l : [Dyn]) -> Set(Dyn) = {
  def work(l : [Dyn], acc: Set(Dyn)) -> Set(Dyn) = {
    match l with
    | e::es -> work es (Set.add e acc)
    | _ -> acc
  };
  work l (Set.empty)
}

def list_to_map(l: [(Dyn, Dyn)]) -> (Dyn => Dyn) = {
  def work(l: [Dyn], acc: (Dyn => Dyn)) -> (Dyn => Dyn) = {
    match l with
    | (k, v)::es -> work es (Map.add k v acc)
    | [] -> acc
  };
  work l (Map.empty)
}

def for_all(l: [Dyn], p: (Dyn -> Bool)) -> Bool = {
  def work(l: [Dyn]) -> Bool = {
    match l with
    | e::es -> if (p e) then work es else {def _ = dprint(e); false }
    | [] -> true
  };
  work l
}
