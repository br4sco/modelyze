/*
   Modeling Kernel Language (Modelyze) library
   Copyright (C) 2010-2012 David Broman

   Modelyze library is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Modelyze library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

   written by Oscar Eriksson oerikss@kth.se
 */

include MEBMLANGPhysical

def AngularVelocitySensor(o: AngularVelocity, p: Rotational, n: Rotational) = {
  AcrossSensor o p n
}

def TorqueSensor(t: Torque, p: Rotational, n: Rotational) = {
  ThroughSensor t p n
}

def Free(p: Rotational, n: Rotational) = {
  def o_F: AngularVelocity;
  def t_F: Torque;
  Branch t_F o_F p n;
  t_F = 0.
}

def Fixed(p: Rotational, n: Rotational) = {
  def o_F: AngularVelocity;
  def t_F: Torque;
  Branch t_F o_F p n;
  o_F = 0.
}

def Damper(D: Real, p: Rotational, n: Rotational) = {
  def o_D: AngularVelocity;
  def t_D: Torque;
  Branch t_D o_D p n;
  D*o_D = t_D
}

def BodyDebug(I: Real, o_B0: Real, p: Rotational, n: Rotational,
  t_B: Torque, o_B: AngularVelocity) = {

  init o_B o_B0;
  Branch t_B o_B p n;
  I*der(o_B) = t_B
}

def Body(I: Real, o_B0: Real, p: Rotational, n: Rotational) = {
  def o_B: AngularVelocity;
  def t_B: Torque;
  BodyDebug I o_B0 p n t_B o_B
}

def Clutch(open: Bool, p: Rotational, n: Rotational) = {
  def c(open: Bool) = { if open then nilp () else Fixed p n };
  c(open)
}

def TimedClutch(open: Bool, s: Signal, p: Rotational, n: Rotational) = {
  sw (Clutch open p n) (fun t: () -> Clutch (!open) p n) (s < 1.)
}
