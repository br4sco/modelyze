/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

Author: Oscar Eriksson oerikss@kth.se
*/

include ModelyzeDAE
include Elaboration

type M
type T
type E = <Real>
type VF = <Real> -> (Real, Real)
type G = (Bool, ?)
type GF = <Real> -> (G, G)
type S = ([M], E, [M])
type Empty

def eqn: E -> M
def sw: S -> M
def e: Empty

def value: <Real> -> Real

// Helper functions
def gs2g(g1: G, g2: G) -> G = {
  match (g1, g2) with
  | ((true, _), (true, _)) -> error "Contradicting fixed values"
  | ((true, _), _) -> g1
  | (_, (true, _)) -> g2
  | ((_, e), _) -> g2
  | (_, (_, e)) -> g1
  | ((_, v1), (_, v2)) -> (false, (v1+v2)/2.)
  | _ -> error "Unmatched gs2g"
}

def vf2gf(vf: VF, v: <Real>) -> (G, G) = {
  def (y, yp) = vf v;
  ((false, y), (false, yp))
}

def f_sw(s: S, f_zc: E -> Bool, v: V, g: G) -> ([M], G) = {
  def (m_cur, z, m_aft) = s;
  
  if (f_zc z) then 
}
