/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

Author: Oscar Eriksson oerikss@kth.se
*/

include Equation

type Time = Real

type UknownValueMap = (<Real> => (Real, Real))
type ZeroCrossing = <Real>
type ZeroCrossingMap = (ZeroCrossing => Bool)
type Switch = Equations -> ZeroCrossing -> Equations -> Equations

def switch: Switch
def value : Real -> Real

type HybridState = (Equations, UknownValueMap, ZeroCrossingMap, Time)

def convertToCT(eqs: Equations, uvm: UknownValueMap) -> (UkMap, VarArray, VarArray) = {
  def makeYYandYP (ukm: UkMap) -> (VarArray, VarArray) = {
    def UkList ukl = (Map.toList ukm);
    
  };
  
  def ukm = makeUkMap eqs;
  def (yy, yp) = makeYYandYP ukm;
  (ukm, yy, yp)
}

def enterTheEasyGoingLandOfContinousTime(hstate: HybtridState) -> HybtridState = {
  def (eqs, uvm, zcm, t) = hstate;
  def (ukm, yy, yp) = convertTo eqs uvm;
  hstate  
}

def 
