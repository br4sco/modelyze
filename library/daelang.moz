/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Elaboration
include DAELANGInterfaces
include Indexreduction

type VMap = (<Real> => Real)
type GVMap = (<Real> => (Bool, Real))
type Sigma = (Real, Set(Equations), VMap)
type Sigmap = (Real, Set(Equations), GVMap)
type Sigmapp = (Real, Set(Equations), GVMap, Set ?)

def init_guess: <Real> -> Real -> Equations
def nil = NoEqn

def M_m(m: Equations, sigma: Sigmapp) -> Sigmapp = {
  def (t, E, f, T) = sigma;
  match m with
  | d_1 = d_2 -> (t, (Set.add m E), f, T)
  | init x (lift r: Real) -> {
      if !(Map.mem x f) then (t, E, (Map.add x (true, r) f), T)
      else {
        def (b, r_o) = (Map.find x f);
        if (b && r_o != r) then error "multiple inits for the same state variable"
        else (t, E, (Map.add x (true, r) f), T)
      }
    }
  | init_guess x (lift r: Real) -> {
      if !(Map.mem x f) then (t, E, (Map.add x (false, r) f), T)
      else {
        def (b, r_o) = (Map.find x f);
        if (b || r_o != r) then error "multiple init guesses for the same state variable or trying to overide an init with a init guess"
        else (t, E, (Map.add x (false, r) f), T)
      }
    }
  | Branch _ _ _ _ -> (t, E, f, (Set.add m T))
  | RefBranch _ _ _ -> (t, E, f, (Set.add m T))
  | m_1; m_2 -> M_m m_2 (M_m m_1 sigma)
  | nil -> sigma
  | _ -> error "Unmatched pattern in M_m"
ps}

def elabtopol(T: Set(?)) -> Set(Equations) = {
  cont_to_set (elaborateConnections (set_to_cont T))
}

def indexred(E: Set(Equations)) -> Set(Equations) = {
  def (eqs, _) = indexReducationPantelides (set_to_cont E) (Map.empty);
  cont_to_set eqs;
}

// def findiv(sigma: Sigmap) -> (Real, VMap) = {
//   def dt = 0.1;
//   def (t0, resf, yy0, _, yp0, vids) = get_dae_find_ic_input sigma 0.;
//   def s = DAESolver.init resf t0 yy0 yp0;
//   def _ = DAESolver.calc_ic_ya_ydp s vids yy0 yp0 (t0 + dt);

// }
