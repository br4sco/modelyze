/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include GRAPHSIMMECHANICAL
include GRAPHSIMELECTRICAL

def EMFE(k: Real, u: Voltage, i: Current, omu: AngularVelocityU) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    u = k * omu
}

def EMFM(k: Real, u: Vector3, omu: AngularVelocityU, Tu: TorqueU, i: Current) -> FrameFun2 = {
  fun f1: Frame -> fun f2: Frame ->
    def om1, om2, om3, T1, T2, T3: Real;
    def om = vec3 om1 om2 om3;
    def T = vec3 T1 T2 T3;
    def n = normalize u;
    angularVelocityEdge f1 f2 om T;
    // omu = dot n om;
    Tu = dot n T;
    // T = Tu *. n;
    om = omu *. n;
    Tu = k * i
}

def EMF(k: Real, uu: Vector3, omu: AngularVelocityU, Tu: TorqueU, u: Voltage, i: Current, f1: Frame, f2: Frame) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    f1 -- EMFM k uu omu Tu i -- f2;
    n1 -- EMFE k u i omu -- n2
}

def EMF(k: Real, uu: Vector3, f1: Frame, f2: Frame) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def omu: AngularVelocityU;
    def Tu: TorqueU;
    def u: Voltage;
    def i: Current;
    n1 -- EMF k uu omu Tu u i f1 f2 -- n2
}
 def EMFff(k: Real, uu: Vector3, omu: AngularVelocityU, Tu: TorqueU, u: Voltage, i: Current, n1: Node, n2: Node) -> FrameFun2 = {
  fun f1: Frame -> fun f2: Frame ->
    EMF k uu omu Tu u i f1 f2 n1 n2
}
