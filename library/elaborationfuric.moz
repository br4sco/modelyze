/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Equation
include Physical

type Node = ?
type IMatrix = ((Int => (Int => Int)), Int, Int)

def in_edge = -1
def out_edge = 1
def no_edge = 0

def emptyIMatrix(n: Int, m: Int) -> IMatrix = {
  if n < 0 || m < 0 then error "n and m needs to be positive integers"
  else (Map.empty, n, m)
}

def checkDim(IM: IMatrix, i: Int, j: Int) -> () = {
  def (M, n, m) = IM;
  if (i >= n || j >= m) then error "Index out of range"
  else ()
}

def get(IM: IMatrix, i: Int, j: Int) -> Int = {
  def (M, n, m) = IM;
  def _ = checkDim IM i j;
  if (Map.mem i M) && (Map.mem j (Map.find i M))
  then (Map.find j (Map.find i M)) else no_edge
}

def set(IM: IMatrix, i: Int, j: Int, v: Int) -> IMatrix = {
  def (M, n, m) = IM;
  def _ = checkDim IM i j;
  if v != no_edge && v != in_edge && v != out_edge then
    error "Valid element values are 0, -1, 1"
  else {
    if !(Map.mem i M) then (Map.add i (Map.add j v (Map.empty)) M, n, m)
    else (Map.add i (Map.add j v (Map.find i M)) M, n, m)
  }
}

def pp(IM: IMatrix) -> String = {
  def (_, n, m) = IM;
  def work(i: Int, j: Int) -> String = {
    if i >= n then ""
    else {
      if j >= m then "\n" ++ (work (i+1) 0)
      else int2string (get IM i j) ++ ", " ++ (work i (j+1))
    }
  };
  "---\n" ++ (work 0 0) ++ "---\n"
}

def enumerateEdges(Tl: [Equations])
  -> [(Node, Node, <Real>, <Real>)] = {

  def f(em: [(Node, Node, <Real>, <Real>)], e: Equations)
    -> [(Node, Node, <Real>, <Real>)] = {

    match e with
    | Branch f e p n -> (p, n, f, e)::em
    | _ -> error "Unrecognized element type in topological description"
  };

  fold_left f [] Tl
}

def enumerateNodes(el: [(Node, Node, <Real>, <Real>)])
  -> (Node => Int) = {

  def f(mi: ((Node => Int), Int), e: (Node, Node, <Real>, <Real>))
    -> ((Node => Int), Int) = {

    def (m, i) = mi;
    def (n, _, _, _) = e;
    (Map.add n i m, i + 1)
  };

  def (m, _) = fold_left f (Map.empty, 0) el;
  m
}

def buildIndcidenceMatrix(el: [(Node, Node, <Real>, <Real>)], nm: (Node => Int)) -> IMatrix = {
 def n = (Map.size nm);
 def m = length el;
 def f(IMj: (IMatrix, Int), e: (Node, Node, <Real>, <Real>))
    -> (IMatrix, Int) = {

    def (IM, j) = IMj;
    def (n_in, n_out, _, _) = e;
    def i_in = (Map.find n_in nm);
    def i_out = (Map.find n_out nm);
    (set (set IM i_in j in_edge) i_out j out_edge, j + 1)
 };

 def (IM, _) = fold_left f (emptyIMatrix n m, 0) el;
  IM
}

def addrow(IM: IMatrix, i1: Int, i2: Int) -> IMatrix = {
  def (M, n, m) = IM;
  def f(IM: IMatrix, e: (Int, Int)) -> IMatrix = {
    def (j, v) = e;
    set IM i2 j ((get IM i2 j) + v)
  };
  def _ = checkDim IM i1 0;
  def _ = checkDim IM i2 0;
  fold_left f IM (Map.toList (Map.find i1 M))
}

def chsignrow(IM: IMatrix, i: Int) -> IMatrix = {
  def (M, n, m) = IM;
  def _ = checkDim IM i 0;
  def f(IM: IMatrix, e: (Int, Int)) -> IMatrix = {
    def (j, v) = e;
    set IM i j ((get IM i j) * (-1))
  };
  fold_left f IM (Map.toList (Map.find i M))
}

/* def elaboratetopology(T: Set(Equations)) -> Set(Equations) = { */

/* } */
