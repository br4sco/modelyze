/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include Equation
include Physical

type Node = ?

def outgoing = 1
def incomming = -1

def buildEdgeList(Tl: [Equations]) -> [(Node, Node, <Real>, <Real>)] = {

  def f(em: [(Node, Node, <Real>, <Real>)], ed: Equations)
    -> [(Node, Node, <Real>, <Real>)] = {

    match ed with
    | Branch f e p n -> (p, n, f, e)::em
    | _ -> error "Unrecognized element type in topological description"
  };

  fold_left f [] Tl
}

def buildAdjList(el: [(Node, Node, <Real>, <Real>)])
  -> (Node => [(Node, Int)]) = {

  def ff(al: (Node => [(Node, Int, <Real>, <Real>)]), ed: (Node, Node, <Real>, <Real>))
    -> (Node => [(Node, Int, <Real>, <Real>)]) = {

    def (p, n, f, e) = ed;
    if !(Map.mem p al) then ff (Map.add p [] al) ed
    else
      if !(Map.mem n al) then ff (Map.add n [] al) ed
      else {
        def alnew = (Map.add n ((p, outgoing, f, e)::(Map.find n al)) al);
        Map.add p ((n, incomming, f, e)::(Map.find p alnew)) alnew
      }
  };

  fold_left ff (Map.empty) el
}

/* def elaboratetopology(T: Set(Equations)) -> Set(Equations) = { */

/* } */
