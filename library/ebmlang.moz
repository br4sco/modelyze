/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

//include Elaboration
include GraphElaboration
include EBMLANGHelpers
include IndexReduction

type S = (Set(Equations), VMap, Set(?))

def nil = NoEqn
def nilp : () -> Equations //we need this to pattern match on nil

def M_s(s: Equations, sp: S) -> S = {
  def (E, mu, G) = sp;
  match s with
  | d_1 = d_2 -> ((Set.add s E), mu, G)
  | init x (lift r: Real) -> {
      if !(Map.mem x mu) then (E, (Map.add x r mu), G)
      else {
        def r_o = (Map.find x mu);
        if r_o != r then error "multiple inits for the same state variable"
        else (E, (Map.add x r mu), G)
      }
    }
  | Branch _ _ _ _ -> (E, mu, (Set.add s G))
  | RefBranch _ _ _ -> (E, mu, (Set.add s G))
  | s_1; s_2 -> M_s s_2 (M_s s_1 sp)
  | nilp _ -> sp
  | _ -> error "Unmatched pattern in M_s"
}

def elabtopol(G: Set(?)) -> Set(Equations) = {
  def llog = logger "elabtopol" DEBUG;
  def _ = llog "before:" (set_to_cont G);
  def E = { if (Set.size G) == 0 then Set.empty else
    // cont_to_set (elaborateConnections (set_to_cont G)) };
    elaboratetopology G };
  def _ = llog "after:" (set_to_cont E);
  E
}

def indexred(E: Set(Equations)) -> Set(Equations) = {
  def llog = logger "indexred" DEBUG;
  def _ = llog "before ir" (set_to_cont E);
  def (Ep, dmap) = indexReducationPantelides (set_to_cont E) (Map.empty);
  def _ = llog "after ir" Ep;
  cont_to_set Ep
}

def findiv(f: F) -> (VMap, Real) = {
  def dt = 0.00001;
  def (_, _, t0) = f;
  def (resf, yy0, yp0, vids, ukm) = get_dae_find_ic_input f 0.;
  def s = (DAESolver.init resf t0 yy0 yp0);
  def _ = (DAESolver.calc_ic_ya_ydp s vids yy0 yp0 (t0 + dt));
  (ukmap_yy_yp_to_vmap ukm yy0 yp0, t0 +  dt)
}

def M_f(s: Equations, t: Real) -> F = {
  def llog = logger "M_f" DEBUG;
  def (E, mu, G) = M_s s (Set.empty, Map.empty, Set.empty);
  def _ = llog "initial eqs:" E;
  def Ep = elabtopol G;
  def Epp = indexred (union Ep E);
  def (mup, tp) = findiv (Epp, mu, t);
  def _ = llog "before findiv" mu;
  def _ = llog "after findiv" mup;
  (Epp, mup, tp)
}
