/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/


include Pantelides
include Differentiation

//Equation node that the augmented equation system will contain.
//This is used for keeping track of the mapping between ENodes and
//the original equations
type EqNode
def  eqContainer: EqNode -> Equations -> Equations

type VarSet = Set Expr

//Functions for generating fresh equation and variable nodes
def makeVNode(x:()) -> VNode = {
    def nv:Signal;
    nv;
}

def makeENode(x:()) -> ENode = {
    def ne:EqNode;
    ne;
}

// Generates an equation graph from an equation system. This
// function can be used together with pantelides algrithm,
// implemented in pantelides.mkl
def makeEquationGraph(eqs:Equations) -> (EqsGraph,VarMap,Equations) = {
    def travExpr(exp:Expr, accvar:VarSet, accvarmap:VarMap) -> (VarSet,VarMap) = {
        match exp with
        | der (sym:Signal) -> {
              def x = (match exp with | der u -> u);
              (Set.add exp accvar,Map.add x exp accvarmap);
          }
        | sym:Signal -> (Set.add exp accvar,accvarmap)
        | e1 e2 -> {
              def (accvar1,accvarmap1) = travExpr e1 accvar accvarmap;
              travExpr(e2,accvar1,accvarmap1);
          }
        | _ -> (accvar,accvarmap)
  };
  def travEq(eq:Equations, accgraph:EqsGraph, accvarmap:VarMap) -> (EqsGraph,VarMap,<>) = {
    match eq with
    | e1 = e2 -> {
        def eqnode:EqNode;
        def (varset,accvarmap2) = travExpr(e1 - e2, Set.empty, accvarmap);
        def accgraph2 = (Map.add eqnode (Set.toList varset) accgraph);
        def neweq = eqContainer(eqnode,eq);
        (accgraph2,accvarmap2,neweq);
     }
    | e1 e2 -> {
        def (accgraph1,accvarmap1,e1b) = travEq(e1,accgraph,accvarmap);
        def (accgraph2,accvarmap2,e2b) = travEq(e2,accgraph1,accvarmap1);
        (accgraph2,accvarmap2,e1b e2b);
      }
    | e -> (accgraph,accvarmap,e)
  };
  travEq(eqs,Map.empty, Map.empty);
}

// Do index reduction using Panatelides algorithm. The original
// equations are replaced with the differentiated ones. This
// approach has the inherent drifting problem. Please use
// the dummy derivative method (function indexReducationDummyDer)
// for mathematically correct reduction. This function is just
// for testing purposes. Note also that this function
// will not terminate if the equation system is structurally singular.
def indexReducationPantelides(eqs:Equations,olddermap:DerivMap) :
          (Equations,DerivMap) = {

  def addDerEqs(eqs:Expr,eqmap:EqMap) : Expr = {
      def wrapder(n:EqNode,exp:Expr) : Expr = {
          if Map.mem n eqmap
             then der (wrapder (Map.find n eqmap) exp)
             else exp
      };
      match eqs with
        | ~eqContainer n (e1 = e2) ->
          (wrapder n e1) = (wrapder n e2)
        | e1 e2 -> (addDerEqs e1 eqmap) (addDerEqs e2 eqmap)
        | e -> e
  };

    // Generate the equation graph and augmented equation system
    def (graph,varmap,augmentedEqs) = makeEquationGraph(eqs);


    // Execute Pantelides algorithm
    def (_,eqmap) = pantelides(graph,varmap,makeVNode,makeENode);

    // Wrap equations to be differentiated into der expressions
    def eqs2 = addDerEqs(augmentedEqs,eqmap);
    // def _ = dprint(eqs);
    // def _ = dprint("==");
    // def _ = dprint(eqs2);

    // Differentiate
    elaborateDerivatives(eqs2,olddermap)

}
