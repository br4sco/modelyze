/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include GRAPHSIMCORE

type Node
type NodeFun2 = Node -> Node -> Model
type NodeFun1 = Node -> Model

def inParallel(l: NodeFun2, r: NodeFun2) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
  l n1 n2;
  r n1 n2
}
def (||) = inParallel

def inSeries(l: Node, r: NodeFun1) -> Model = {
  r l
}
def (--) = inSeries

def inSeries(l: NodeFun1, r: Node) -> Model = {
  l r
}
def (--) = inSeries

def inSeries(f: Node, r: NodeFun2) -> NodeFun1 = {
  r f
}
def (--) = inSeries

def inSeries(l: NodeFun1, r: NodeFun2) -> NodeFun1 = {
  fun n2: Node ->
    def n1: Node;
    l n1;
    r n1 n2
}
def (--) = inSeries

def inSeriesExposeNode(l: NodeFun2, n2: Node) -> (NodeFun2, Node) = {
  (l, n2)
}
def (-.-) = inSeriesExposeNode

def inSeriesExposeNode(ln2: (NodeFun2, Node), r: NodeFun2) -> NodeFun2 = {
  fun n1: Node -> fun n3: Node ->
      def (l, n2) = ln2;
      l n1 n2;
      r n2 n3
}
def (-.-) = inSeriesExposeNode

def inSeries(l: NodeFun2, r: NodeFun2) -> NodeFun2 = {
  fun n1: Node -> fun n3: Node ->
    def n2: Node;
    l n1 n2;
    r n2 n3
}
def (--) = inSeries

def serializei(f: (Int -> NodeFun2), n: Int) -> NodeFun2 = {
  def work(a: NodeFun2, i: Int) -> NodeFun2 = {
    if n - i < 0 then error "n is not a positive number"
    else if n - i == 0 then a
    else work (a -- f (i + 1)) (i + 1)
  };
  work (f 1) 1
}

def serialize(f: NodeFun2, n: Int) -> NodeFun2 = {
  serializei (fun i: Int -> f) n
}

type Current = <Real>
type Voltage = <Real>

def electricalEdge: Node -> Node -> Voltage -> Current -> Model

def getElectricalEdges(e: Model) -> ([ScalarPairEdge], Model) = {
  def work(e: Model, a: ([ScalarPairEdge], Model))
    -> ([ScalarPairEdge], Model) = {

    match e with
    | Comp e_1 e_2 -> work e_2 (work e_1 a)
    | electricalEdge n_1 n_2 x y ->
        (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)

  };

  work e ([], NoElement)
}

def VoltageSource(f: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node -> electricalEdge n1 n2 f i
}

def VoltageSource(f: Voltage) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def i: Current;
    n1 -- VoltageSource f i -- n2
}

def CurrentSource(f: Current, u: Voltage) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node -> electricalEdge n1 n2 u f
}

def CurrentSource(f: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def u: Voltage;
    n1 -- CurrentSource f u -- n2
}

def VoltageSensor(u: Voltage) -> NodeFun2 = {
  CurrentSource 0. u
}

def CurrentSensor(i: Current) -> NodeFun2 = {
  VoltageSource 0. i
}

def Resistor(R: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    u = R * i
}

def Resistor(R: Real) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def u_R: Voltage;
    def i_R: Current;
    n1 -- Resistor R u_R i_R -- n2
}

def Capacitor(C: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    i = C * u'
}

def Capacitor(C: Real) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def u_C: Voltage;
    def i_C: Current;
    n1 -- Capacitor C u_C i_C -- n2
}

def Inductor(L: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    u = L * i'
}

def Inductor(L: Real) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def u_L: Voltage;
    def i_L: Current;
    n1 -- Inductor L u_L i_L -- n2
}
