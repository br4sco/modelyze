/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.

written by Oscar Eriksson oerikss@kth.se
*/

include GRAPHSIMCORE

type Current = <Real>
type Voltage = <Real>

def electricalEdge: Node -> Node -> Voltage -> Current -> Model

def getElectricalEdges(e: Model) -> ([ScalarPairEdge], Model) = {
  def work(e: Model, a: ([ScalarPairEdge], Model))
    -> ([ScalarPairEdge], Model) = {

    match e with
    | e_1; e_2 -> work e_2 (work e_1 a)
    | electricalEdge n_1 n_2 x y ->
        (((n_1, n_2), (x, y))::(fst a), snd a)
    | _ -> (fst a, (snd a); e)

  };

  work e ([], NoElement)
}

def VoltageActuator(f: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node -> electricalEdge n1 n2 f i
}

def VoltageActuator(f: Voltage) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def i: Current;
    n1 -- VoltageActuator f i -- n2
}

def CurrentActuator(f: Current, u: Voltage) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node -> electricalEdge n1 n2 u f
}

def CurrentActuator(f: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    def u: Voltage;
    n1 -- CurrentActuator f u -- n2
}

def Resistor(R: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    u = R * i
}

def Capacitor(C: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    i = C * u'
}

def Inductor(L: Real, u: Voltage, i: Current) -> NodeFun2 = {
  fun n1: Node -> fun n2: Node ->
    electricalEdge n1 n2 u i;
    u = L * i'
}
